import math
import os
from pathlib import Path

from hammer.tech import Library, ExtraLibrary
from hammer.vlsi import MMMCCorner, MMMCCornerType, HammerSRAMGeneratorTool, SRAMParameters

# Helper function to get voltage string (e.g., 0.99 -> "0p99v", 1.0 -> "1p0v")
def format_voltage_for_tsmc(voltage_value_volts: float) -> str:
    return str(voltage_value_volts).replace('.', 'p') + "v"

# Helper function to get temperature string (e.g., 0 -> "0c", 125 -> "125c", -40 -> "m40c")
def format_temp_for_tsmc(temp_value_celsius: int) -> str:
    if temp_value_celsius < 0:
        return f"m{abs(temp_value_celsius)}c"
    return f"{temp_value_celsius}c"

class TSMC28SRAMGenerator(HammerSRAMGeneratorTool):
    def tool_config_prefix(self) -> str:
        return "sram_generator.tsmc28"

    def version_number(self, version: str) -> int:
        return 0

    # Run generator for a single sram and corner
    def generate_sram(self, params: SRAMParameters, corner: MMMCCorner) -> ExtraLibrary:
        pdk_base_path = Path("/export/home/yyzhao/vm/shared/workspace/library/sram")
        
        # Determine process corner string (e.g., "ffg", "ssg", "tt")
        # This mapping might need to be more sophisticated if corners are more complex.
        if corner.type == MMMCCornerType.Setup:
            process_code = "ffg"
            speed_name_for_lib = "slow" 
        elif corner.type == MMMCCornerType.Hold: 
            process_code = "ffg"
            speed_name_for_lib = "fast"
        elif corner.type == MMMCCornerType.Extra: 
            process_code = "tt" 
            speed_name_for_lib = "typical"
        else:
            self.logger.error(f"Unsupported corner type: {corner.type}")
            return ExtraLibrary.empty()
        
        # Format voltage and temperature for the filename (e.g., "ffg0p99v0c")
        voltage_str = format_voltage_for_tsmc(corner.voltage.value_in_units("V"))
        temp_str = format_temp_for_tsmc(int(corner.temp.value_in_units("C")))
        corner_file_str = f"{process_code}{voltage_str}{temp_str}"
        
        sram_name = params.name
        sram_name_lower = sram_name.lower()
        
        sram_base_name = ""
        sram_lib_name = sram_name  # The library name in the output should be the full SRAM name
        sram_root_path = None

        if sram_name.startswith("TS1N"):
            sram_type_dir = "SinglePort"
            sram_base_name = f"{sram_name_lower}_170a"
            sram_root_path = pdk_base_path / sram_type_dir / sram_base_name
        elif sram_name.startswith("TSDN"):
            sram_type_dir = "DualPort"
            sram_base_name = f"{sram_name_lower}_170a"
            sram_root_path = pdk_base_path / sram_type_dir / sram_base_name
        else:
            self.logger.error(
                f"Unsupported SRAM type: '{sram_name}'. "
                f"This generator is configured for 'TS1N...' and 'TSDN...' SRAMs."
            )
            return ExtraLibrary.empty()

        # Construct paths to the library files
        lef_path = sram_root_path / "LEF" / f"{sram_base_name}.lef"
        gds_path = sram_root_path / "GDSII" / f"{sram_base_name}.gds"
        verilog_path = sram_root_path / "VERILOG" / f"{sram_base_name}_{corner_file_str}.v"
        nldm_lib_path = sram_root_path / "NLDM" / f"{sram_base_name}_{corner_file_str}.lib"
        # Check if files exist (optional, but good for debugging)
        for f_path in [lef_path, gds_path, verilog_path, nldm_lib_path]:
            if not f_path.exists():
                self.logger.warning(f"File not found at expected path: {f_path}")
        
        from hammer.tech import Corner, Supplies, Provide
        lib = ExtraLibrary(prefix=None, library=Library(
            name=sram_lib_name,
            nldm_liberty_file=str(nldm_lib_path),
            lef_file=str(lef_path),
            gds_file=str(gds_path),
            verilog_sim=str(verilog_path),
            corner=Corner(nmos=speed_name_for_lib, pmos=speed_name_for_lib, temperature=str(corner.temp.value_in_units("C")) + " C"),
            supplies=Supplies(GND="0 V", VDD=str(corner.voltage.value_in_units("V")) + " V"),
            provides=[Provide(lib_type="sram", vt=params.vt)]
        ))
        
        return lib

tool = TSMC28SRAMGenerator
