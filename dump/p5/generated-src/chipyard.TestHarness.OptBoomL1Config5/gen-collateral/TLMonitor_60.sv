// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TLMonitor_60(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [1:0]  io_in_a_bits_size,
  input [7:0]  io_in_a_bits_source,
  input [28:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_size,
  input [7:0]  io_in_d_bits_source
);

  wire [31:0]   _plusarg_reader_1_out;	// @[PlusArg.scala:80:11]
  wire [31:0]   _plusarg_reader_out;	// @[PlusArg.scala:80:11]
  wire          a_first_done = io_in_a_ready & io_in_a_valid;	// @[Decoupled.scala:51:35]
  reg  [255:0]  inflight;	// @[Monitor.scala:611:27]
  reg  [1023:0] inflight_opcodes;	// @[Monitor.scala:613:35]
  reg  [1023:0] inflight_sizes;	// @[Monitor.scala:615:33]
  wire [255:0]  _GEN = {248'h0, io_in_a_bits_source};	// @[OneHot.scala:57:35]
  wire          d_release_ack = io_in_d_bits_opcode == 3'h6;	// @[Monitor.scala:81:25, :670:46]
  wire [255:0]  _GEN_0 = {248'h0, io_in_d_bits_source};	// @[OneHot.scala:57:35]
  reg  [31:0]   watchdog;	// @[Monitor.scala:706:27]
  wire          d_first_done = io_in_d_ready & io_in_d_valid;	// @[Decoupled.scala:51:35]
  wire          _T_613 = d_first_done & ~d_release_ack;	// @[Decoupled.scala:51:35, Monitor.scala:670:46, :671:74, :675:72]
  wire [2062:0] _GEN_1 = {2053'h0, io_in_d_bits_source, 2'h0};	// @[Monitor.scala:677:76, OneHot.scala:64:12]
  wire [2062:0] _d_opcodes_clr_T_5 = 2063'hF << _GEN_1;	// @[Monitor.scala:677:76]
  wire [2050:0] _a_opcodes_set_T_1 = {2047'h0, a_first_done ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << {2041'h0, io_in_a_bits_source, 2'h0};	// @[Decoupled.scala:51:35, Monitor.scala:42:11, :632:35, :643:40, :652:72, :654:{28,53}, :656:54, OneHot.scala:64:12]
  wire [2062:0] _d_sizes_clr_T_5 = 2063'hF << _GEN_1;	// @[Monitor.scala:677:76, :678:74]
  wire [2049:0] _a_sizes_set_T_1 = {2047'h0, a_first_done ? {io_in_a_bits_size, 1'h1} : 3'h0} << {2040'h0, io_in_a_bits_source, 2'h0};	// @[Decoupled.scala:51:35, Misc.scala:201:34, Monitor.scala:42:11, :645:38, :652:72, :655:{28,51}, :656:54, :657:52, OneHot.scala:64:12]
  always @(posedge clock) begin
    if (reset) begin
      inflight <= 256'h0;	// @[Monitor.scala:611:27, :723:35]
      inflight_opcodes <= 1024'h0;	// @[Monitor.scala:613:35, :725:35]
      inflight_sizes <= 1024'h0;	// @[Monitor.scala:615:33, :725:35]
      watchdog <= 32'h0;	// @[Monitor.scala:706:27]
    end
    else begin
      inflight <= (inflight | (a_first_done ? 256'h1 << _GEN : 256'h0)) & ~(_T_613 ? 256'h1 << _GEN_0 : 256'h0);	// @[Decoupled.scala:51:35, Monitor.scala:611:27, :623:34, :652:72, :653:28, :661:34, :675:{72,91}, :676:21, :702:{27,36,38}, :723:35, OneHot.scala:57:35]
      inflight_opcodes <= (inflight_opcodes | (a_first_done ? _a_opcodes_set_T_1[1023:0] : 1024'h0)) & ~(_T_613 ? _d_opcodes_clr_T_5[1023:0] : 1024'h0);	// @[Decoupled.scala:51:35, Monitor.scala:613:35, :627:33, :652:72, :656:{28,54}, :665:33, :675:{72,91}, :677:{21,76}, :703:{43,60,62}, :725:35]
      inflight_sizes <= (inflight_sizes | (a_first_done ? _a_sizes_set_T_1[1023:0] : 1024'h0)) & ~(_T_613 ? _d_sizes_clr_T_5[1023:0] : 1024'h0);	// @[Decoupled.scala:51:35, Monitor.scala:615:33, :629:31, :652:72, :657:{28,52}, :667:31, :675:{72,91}, :678:{21,74}, :704:{39,54,56}, :725:35]
      if (a_first_done | d_first_done)	// @[Decoupled.scala:51:35, Monitor.scala:712:27]
        watchdog <= 32'h0;	// @[Monitor.scala:706:27]
      else	// @[Monitor.scala:712:27]
        watchdog <= watchdog + 32'h1;	// @[Monitor.scala:706:27, :711:26]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire  [7:0][2:0] _GEN_2 = '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};	// @[Monitor.scala:686:39]
    wire  [7:0][2:0] _GEN_3 = '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};	// @[Monitor.scala:685:38]
    wire  [5:0]      _is_aligned_mask_T_1 = 6'h7 << io_in_a_bits_size;	// @[package.scala:235:71]
    wire  [2:0]      _GEN_4 = io_in_a_bits_address[2:0] & ~(_is_aligned_mask_T_1[2:0]);	// @[Edges.scala:20:16, package.scala:235:{46,71,76}]
    wire             mask_size = io_in_a_bits_size == 2'h2;	// @[Misc.scala:208:26, OneHot.scala:64:12]
    wire             mask_acc = (&io_in_a_bits_size) | mask_size & ~(io_in_a_bits_address[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}]
    wire             mask_acc_1 = (&io_in_a_bits_size) | mask_size & io_in_a_bits_address[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}]
    wire             mask_size_1 = io_in_a_bits_size == 2'h1;	// @[Misc.scala:208:26, OneHot.scala:64:12]
    wire             mask_eq_2 = ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_3 = ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_4 = io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_5 = io_in_a_bits_address[2] & io_in_a_bits_address[1];	// @[Misc.scala:209:26, :213:27]
    wire             mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire  [7:0]      mask = {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0], mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]), mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0], mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]), mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0], mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]), mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0], mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};	// @[Cat.scala:33:92, Misc.scala:209:26, :210:20, :213:27, :214:29]
    wire             _GEN_5 = io_in_a_valid & io_in_a_bits_opcode == 3'h6;	// @[Monitor.scala:81:{25,54}]
    wire             _GEN_6 = io_in_a_bits_param > 3'h2;	// @[Bundles.scala:111:27, Monitor.scala:640:42]
    wire             _GEN_7 = io_in_a_valid & (&io_in_a_bits_opcode);	// @[Monitor.scala:92:{25,53}]
    wire             _GEN_8 = io_in_a_valid & io_in_a_bits_opcode == 3'h4;	// @[Monitor.scala:104:{25,45}]
    wire             _GEN_9 = io_in_a_bits_mask != mask;	// @[Cat.scala:33:92, Monitor.scala:110:30]
    wire             _GEN_10 = io_in_a_valid & io_in_a_bits_opcode == 3'h0;	// @[Misc.scala:201:34, Monitor.scala:114:{25,53}]
    wire             _GEN_11 = io_in_a_valid & io_in_a_bits_opcode == 3'h1;	// @[Misc.scala:201:81, Monitor.scala:122:{25,56}]
    wire             _GEN_12 = io_in_a_valid & io_in_a_bits_opcode == 3'h2;	// @[Monitor.scala:130:{25,56}, :640:42]
    wire             _GEN_13 = io_in_a_valid & io_in_a_bits_opcode == 3'h3;	// @[Bundles.scala:148:30, Monitor.scala:138:{25,53}]
    wire             _GEN_14 = io_in_a_valid & io_in_a_bits_opcode == 3'h5;	// @[Monitor.scala:146:{25,46}]
    wire             _GEN_15 = io_in_d_bits_size != 2'h3;	// @[Misc.scala:205:21, Monitor.scala:312:27]
    wire             _GEN_16 = io_in_d_valid & io_in_d_bits_opcode == 3'h4;	// @[Monitor.scala:104:25, :318:{25,47}]
    wire             _GEN_17 = io_in_d_valid & io_in_d_bits_opcode == 3'h5;	// @[Monitor.scala:146:25, :328:{25,51}]
    wire  [1023:0]   _GEN_18 = {1014'h0, io_in_d_bits_source, 2'h0};	// @[Monitor.scala:634:44, OneHot.scala:64:12]
    wire  [1023:0]   _a_opcode_lookup_T_1 = inflight_opcodes >> _GEN_18;	// @[Monitor.scala:613:35, :634:44]
    wire  [255:0]    a_set_wo_ready = io_in_a_valid ? 256'h1 << _GEN : 256'h0;	// @[Monitor.scala:624:34, :648:71, :649:22, :723:35, OneHot.scala:57:35]
    wire             _T_617 = io_in_d_valid & ~d_release_ack;	// @[Monitor.scala:670:46, :671:74, :680:71]
    wire             same_cycle_resp = io_in_a_valid & io_in_a_bits_source == io_in_d_bits_source;	// @[Monitor.scala:681:{88,113}]
    wire             _GEN_19 = _T_617 & same_cycle_resp;	// @[Monitor.scala:680:71, :681:88, :684:30]
    wire             _GEN_20 = _T_617 & ~same_cycle_resp;	// @[Monitor.scala:680:71, :681:88, :684:30]
    wire  [3:0]      _GEN_21 = {2'h0, io_in_d_bits_size};	// @[Monitor.scala:691:36, OneHot.scala:64:12]
    wire             _T_703 = io_in_d_valid & d_release_ack;	// @[Monitor.scala:670:46, :791:71]
    wire  [255:0]    _T_599 = inflight >> _GEN;	// @[Monitor.scala:611:27, :658:26, OneHot.scala:57:35]
    wire  [255:0]    _T_618 = inflight >> _GEN_0;	// @[Monitor.scala:611:27, :682:25, OneHot.scala:57:35]
    wire  [1023:0]   _a_size_lookup_T_1 = inflight_sizes >> _GEN_18;	// @[Monitor.scala:615:33, :634:44, :638:40]
    wire  [255:0]    _T_704 = 256'h0 >> _GEN_0;	// @[Monitor.scala:723:35, :793:25, OneHot.scala:57:35]
    wire  [1023:0]   _c_size_lookup_T_1 = 1024'h0 >> _GEN_18;	// @[Monitor.scala:634:44, :725:35, :747:42]
    always @(posedge clock) begin	// @[Monitor.scala:42:11]
      if (_GEN_5 & ~reset) begin	// @[Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_5 & ~reset) begin	// @[Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_5 & ~reset & ~(&io_in_a_bits_size)) begin	// @[Misc.scala:205:21, Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_5 & ~reset & (|_GEN_4)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_5 & ~reset & _GEN_6) begin	// @[Bundles.scala:111:27, Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_5 & ~reset & io_in_a_bits_mask != 8'hFF) begin	// @[Monitor.scala:42:11, :81:54, :88:{18,31}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_5 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset) begin	// @[Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset) begin	// @[Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & ~(&io_in_a_bits_size)) begin	// @[Misc.scala:205:21, Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & (|_GEN_4)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & _GEN_6) begin	// @[Bundles.scala:111:27, Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & io_in_a_bits_param == 3'h0) begin	// @[Misc.scala:201:34, Monitor.scala:42:11, :92:53, :99:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & io_in_a_bits_mask != 8'hFF) begin	// @[Monitor.scala:42:11, :88:18, :92:53, :100:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_8 & ~reset & io_in_a_bits_address[28:12] != 17'h10000) begin	// @[Monitor.scala:42:11, :104:45, Parameters.scala:137:{31,65}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_8 & ~reset & (|_GEN_4)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :104:45]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_8 & ~reset & (|io_in_a_bits_param)) begin	// @[Monitor.scala:42:11, :104:45, :109:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_8 & ~reset & _GEN_9) begin	// @[Monitor.scala:42:11, :104:45, :110:30]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_8 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :104:45]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_10 & ~reset & io_in_a_bits_address[28:12] != 17'h10000) begin	// @[Monitor.scala:42:11, :114:53, Parameters.scala:137:{31,65}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_10 & ~reset & (|_GEN_4)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :114:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_10 & ~reset & (|io_in_a_bits_param)) begin	// @[Monitor.scala:42:11, :114:53, :118:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_10 & ~reset & _GEN_9) begin	// @[Monitor.scala:42:11, :110:30, :114:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & io_in_a_bits_address[28:12] != 17'h10000) begin	// @[Monitor.scala:42:11, :122:56, Parameters.scala:137:{31,65}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & (|_GEN_4)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :122:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & (|io_in_a_bits_param)) begin	// @[Monitor.scala:42:11, :122:56, :126:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & (|(io_in_a_bits_mask & ~mask))) begin	// @[Cat.scala:33:92, Monitor.scala:42:11, :122:56, :127:{31,33,40}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_12 & ~reset) begin	// @[Monitor.scala:42:11, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_12 & ~reset & (|_GEN_4)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_12 & ~reset & io_in_a_bits_param > 3'h4) begin	// @[Bundles.scala:141:33, Monitor.scala:42:11, :104:25, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_12 & ~reset & _GEN_9) begin	// @[Monitor.scala:42:11, :110:30, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_13 & ~reset) begin	// @[Monitor.scala:42:11, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_13 & ~reset & (|_GEN_4)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_13 & ~reset & io_in_a_bits_param[2]) begin	// @[Bundles.scala:148:30, Monitor.scala:42:11, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_13 & ~reset & _GEN_9) begin	// @[Monitor.scala:42:11, :110:30, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset) begin	// @[Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & (|_GEN_4)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & (|(io_in_a_bits_param[2:1]))) begin	// @[Bundles.scala:161:28, Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & _GEN_9) begin	// @[Monitor.scala:42:11, :110:30, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin	// @[Bundles.scala:45:24, Monitor.scala:49:11]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset & _GEN_15) begin	// @[Monitor.scala:49:11, :81:25, :310:25, :312:27]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_16 & ~reset) begin	// @[Monitor.scala:49:11, :318:47]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_16 & ~reset & _GEN_15) begin	// @[Monitor.scala:49:11, :312:27, :318:47]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_17 & ~reset) begin	// @[Monitor.scala:49:11, :328:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_17 & ~reset & _GEN_15) begin	// @[Monitor.scala:49:11, :312:27, :328:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (a_first_done & ~reset & _T_599[0]) begin	// @[Decoupled.scala:51:35, Monitor.scala:42:11, :658:26]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_617 & ~reset & ~(_T_618[0] | same_cycle_resp)) begin	// @[Monitor.scala:49:11, :680:71, :681:88, :682:{25,49}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_19 & ~reset & ~(io_in_d_bits_opcode == _GEN_3[io_in_a_bits_opcode] | io_in_d_bits_opcode == _GEN_2[io_in_a_bits_opcode])) begin	// @[Monitor.scala:49:11, :684:30, :685:{38,77}, :686:39]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_19 & ~reset & io_in_a_bits_size != io_in_d_bits_size) begin	// @[Monitor.scala:49:11, :684:30, :687:36]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_20 & ~reset & ~(io_in_d_bits_opcode == _GEN_3[_a_opcode_lookup_T_1[3:1]] | io_in_d_bits_opcode == _GEN_2[_a_opcode_lookup_T_1[3:1]])) begin	// @[Monitor.scala:49:11, :634:44, :684:30, :685:38, :686:39, :689:{38,72}, :690:38]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_20 & ~reset & _GEN_21 != {1'h0, _a_size_lookup_T_1[3:1]}) begin	// @[Monitor.scala:49:11, :638:{19,40}, :684:30, :691:36]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (io_in_d_valid & io_in_a_valid & io_in_a_bits_source == io_in_d_bits_source & ~d_release_ack & ~reset & ~(~io_in_d_ready | io_in_a_ready)) begin	// @[Monitor.scala:49:11, :670:46, :671:74, :694:90, :695:{15,32}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (~reset & ~(a_set_wo_ready != (io_in_d_valid & ~d_release_ack ? 256'h1 << _GEN_0 : 256'h0) | a_set_wo_ready == 256'h0)) begin	// @[Monitor.scala:49:11, :624:34, :648:71, :649:22, :662:34, :670:46, :671:{71,74,90}, :672:22, :699:{29,48,67}, :723:35, OneHot.scala:57:35]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (~reset & ~(inflight == 256'h0 | _plusarg_reader_out == 32'h0 | watchdog < _plusarg_reader_out)) begin	// @[Monitor.scala:42:11, :611:27, :706:27, :709:{26,39,47,59}, :723:35, PlusArg.scala:80:11]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_703 & ~reset & ~(_T_704[0])) begin	// @[Monitor.scala:49:11, :791:71, :793:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_703 & ~reset & _GEN_21 != {1'h0, _c_size_lookup_T_1[3:1]}) begin	// @[Monitor.scala:49:11, :691:36, :747:{21,42}, :791:71, :797:36]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:468:31)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0]     _RANDOM_0;
    logic [31:0]     _RANDOM_1;
    logic [31:0]     _RANDOM_2;
    logic [31:0]     _RANDOM_3;
    logic [31:0]     _RANDOM_4;
    logic [31:0]     _RANDOM_5;
    logic [31:0]     _RANDOM_6;
    logic [31:0]     _RANDOM_7;
    logic [31:0]     _RANDOM_8;
    logic [31:0]     _RANDOM_9;
    logic [31:0]     _RANDOM_10;
    logic [31:0]     _RANDOM_11;
    logic [31:0]     _RANDOM_12;
    logic [31:0]     _RANDOM_13;
    logic [31:0]     _RANDOM_14;
    logic [31:0]     _RANDOM_15;
    logic [31:0]     _RANDOM_16;
    logic [31:0]     _RANDOM_17;
    logic [31:0]     _RANDOM_18;
    logic [31:0]     _RANDOM_19;
    logic [31:0]     _RANDOM_20;
    logic [31:0]     _RANDOM_21;
    logic [31:0]     _RANDOM_22;
    logic [31:0]     _RANDOM_23;
    logic [31:0]     _RANDOM_24;
    logic [31:0]     _RANDOM_25;
    logic [31:0]     _RANDOM_26;
    logic [31:0]     _RANDOM_27;
    logic [31:0]     _RANDOM_28;
    logic [31:0]     _RANDOM_29;
    logic [31:0]     _RANDOM_30;
    logic [31:0]     _RANDOM_31;
    logic [31:0]     _RANDOM_32;
    logic [31:0]     _RANDOM_33;
    logic [31:0]     _RANDOM_34;
    logic [31:0]     _RANDOM_35;
    logic [31:0]     _RANDOM_36;
    logic [31:0]     _RANDOM_37;
    logic [31:0]     _RANDOM_38;
    logic [31:0]     _RANDOM_39;
    logic [31:0]     _RANDOM_40;
    logic [31:0]     _RANDOM_41;
    logic [31:0]     _RANDOM_42;
    logic [31:0]     _RANDOM_43;
    logic [31:0]     _RANDOM_44;
    logic [31:0]     _RANDOM_45;
    logic [31:0]     _RANDOM_46;
    logic [31:0]     _RANDOM_47;
    logic [31:0]     _RANDOM_48;
    logic [31:0]     _RANDOM_49;
    logic [31:0]     _RANDOM_50;
    logic [31:0]     _RANDOM_51;
    logic [31:0]     _RANDOM_52;
    logic [31:0]     _RANDOM_53;
    logic [31:0]     _RANDOM_54;
    logic [31:0]     _RANDOM_55;
    logic [31:0]     _RANDOM_56;
    logic [31:0]     _RANDOM_57;
    logic [31:0]     _RANDOM_58;
    logic [31:0]     _RANDOM_59;
    logic [31:0]     _RANDOM_60;
    logic [31:0]     _RANDOM_61;
    logic [31:0]     _RANDOM_62;
    logic [31:0]     _RANDOM_63;
    logic [31:0]     _RANDOM_64;
    logic [31:0]     _RANDOM_65;
    logic [31:0]     _RANDOM_66;
    logic [31:0]     _RANDOM_67;
    logic [31:0]     _RANDOM_68;
    logic [31:0]     _RANDOM_69;
    logic [31:0]     _RANDOM_70;
    logic [31:0]     _RANDOM_71;
    logic [31:0]     _RANDOM_72;
    logic [31:0]     _RANDOM_73;
    logic [31:0]     _RANDOM_74;
    logic [31:0]     _RANDOM_75;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        _RANDOM_36 = `RANDOM;
        _RANDOM_37 = `RANDOM;
        _RANDOM_38 = `RANDOM;
        _RANDOM_39 = `RANDOM;
        _RANDOM_40 = `RANDOM;
        _RANDOM_41 = `RANDOM;
        _RANDOM_42 = `RANDOM;
        _RANDOM_43 = `RANDOM;
        _RANDOM_44 = `RANDOM;
        _RANDOM_45 = `RANDOM;
        _RANDOM_46 = `RANDOM;
        _RANDOM_47 = `RANDOM;
        _RANDOM_48 = `RANDOM;
        _RANDOM_49 = `RANDOM;
        _RANDOM_50 = `RANDOM;
        _RANDOM_51 = `RANDOM;
        _RANDOM_52 = `RANDOM;
        _RANDOM_53 = `RANDOM;
        _RANDOM_54 = `RANDOM;
        _RANDOM_55 = `RANDOM;
        _RANDOM_56 = `RANDOM;
        _RANDOM_57 = `RANDOM;
        _RANDOM_58 = `RANDOM;
        _RANDOM_59 = `RANDOM;
        _RANDOM_60 = `RANDOM;
        _RANDOM_61 = `RANDOM;
        _RANDOM_62 = `RANDOM;
        _RANDOM_63 = `RANDOM;
        _RANDOM_64 = `RANDOM;
        _RANDOM_65 = `RANDOM;
        _RANDOM_66 = `RANDOM;
        _RANDOM_67 = `RANDOM;
        _RANDOM_68 = `RANDOM;
        _RANDOM_69 = `RANDOM;
        _RANDOM_70 = `RANDOM;
        _RANDOM_71 = `RANDOM;
        _RANDOM_72 = `RANDOM;
        _RANDOM_73 = `RANDOM;
        _RANDOM_74 = `RANDOM;
        _RANDOM_75 = `RANDOM;
        inflight = {_RANDOM_2, _RANDOM_3, _RANDOM_4, _RANDOM_5, _RANDOM_6, _RANDOM_7, _RANDOM_8, _RANDOM_9};	// @[Monitor.scala:611:27]
        inflight_opcodes = {_RANDOM_10, _RANDOM_11, _RANDOM_12, _RANDOM_13, _RANDOM_14, _RANDOM_15, _RANDOM_16, _RANDOM_17, _RANDOM_18, _RANDOM_19, _RANDOM_20, _RANDOM_21, _RANDOM_22, _RANDOM_23, _RANDOM_24, _RANDOM_25, _RANDOM_26, _RANDOM_27, _RANDOM_28, _RANDOM_29, _RANDOM_30, _RANDOM_31, _RANDOM_32, _RANDOM_33, _RANDOM_34, _RANDOM_35, _RANDOM_36, _RANDOM_37, _RANDOM_38, _RANDOM_39, _RANDOM_40, _RANDOM_41};	// @[Monitor.scala:613:35]
        inflight_sizes = {_RANDOM_42, _RANDOM_43, _RANDOM_44, _RANDOM_45, _RANDOM_46, _RANDOM_47, _RANDOM_48, _RANDOM_49, _RANDOM_50, _RANDOM_51, _RANDOM_52, _RANDOM_53, _RANDOM_54, _RANDOM_55, _RANDOM_56, _RANDOM_57, _RANDOM_58, _RANDOM_59, _RANDOM_60, _RANDOM_61, _RANDOM_62, _RANDOM_63, _RANDOM_64, _RANDOM_65, _RANDOM_66, _RANDOM_67, _RANDOM_68, _RANDOM_69, _RANDOM_70, _RANDOM_71, _RANDOM_72, _RANDOM_73};	// @[Monitor.scala:615:33]
        watchdog = {_RANDOM_74[31:2], _RANDOM_75[1:0]};	// @[Monitor.scala:706:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  plusarg_reader #(
    .FORMAT("tilelink_timeout=%d"),
    .DEFAULT(0),
    .WIDTH(32)
  ) plusarg_reader (	// @[PlusArg.scala:80:11]
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .FORMAT("tilelink_timeout=%d"),
    .DEFAULT(0),
    .WIDTH(32)
  ) plusarg_reader_1 (	// @[PlusArg.scala:80:11]
    .out (_plusarg_reader_1_out)
  );
endmodule

