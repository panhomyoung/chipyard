// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TLXbar(
  input          clock,
                 reset,
                 auto_in_1_a_valid,
  input  [2:0]   auto_in_1_a_bits_opcode,
                 auto_in_1_a_bits_param,
  input  [3:0]   auto_in_1_a_bits_size,
  input  [4:0]   auto_in_1_a_bits_source,
  input  [31:0]  auto_in_1_a_bits_address,
  input  [15:0]  auto_in_1_a_bits_mask,
  input  [127:0] auto_in_1_a_bits_data,
  input          auto_in_1_a_bits_corrupt,
                 auto_in_1_b_ready,
                 auto_in_1_c_valid,
  input  [2:0]   auto_in_1_c_bits_opcode,
                 auto_in_1_c_bits_param,
  input  [3:0]   auto_in_1_c_bits_size,
  input  [4:0]   auto_in_1_c_bits_source,
  input  [31:0]  auto_in_1_c_bits_address,
  input  [127:0] auto_in_1_c_bits_data,
  input          auto_in_1_c_bits_corrupt,
                 auto_in_1_d_ready,
                 auto_in_1_e_valid,
  input  [1:0]   auto_in_1_e_bits_sink,
  input          auto_in_0_a_valid,
  input  [2:0]   auto_in_0_a_bits_opcode,
                 auto_in_0_a_bits_param,
  input  [3:0]   auto_in_0_a_bits_size,
  input          auto_in_0_a_bits_source,
  input  [31:0]  auto_in_0_a_bits_address,
  input  [15:0]  auto_in_0_a_bits_mask,
  input  [127:0] auto_in_0_a_bits_data,
  input          auto_in_0_a_bits_corrupt,
                 auto_in_0_d_ready,
                 auto_out_1_a_ready,
                 auto_out_1_b_valid,
  input  [1:0]   auto_out_1_b_bits_param,
  input  [31:0]  auto_out_1_b_bits_address,
  input  [15:0]  auto_out_1_b_bits_mask,
  input          auto_out_1_c_ready,
                 auto_out_1_d_valid,
  input  [2:0]   auto_out_1_d_bits_opcode,
  input  [1:0]   auto_out_1_d_bits_param,
  input  [2:0]   auto_out_1_d_bits_size,
  input  [5:0]   auto_out_1_d_bits_source,
  input  [1:0]   auto_out_1_d_bits_sink,
  input          auto_out_1_d_bits_denied,
  input  [127:0] auto_out_1_d_bits_data,
  input          auto_out_1_d_bits_corrupt,
                 auto_out_0_a_ready,
                 auto_out_0_d_valid,
  input  [2:0]   auto_out_0_d_bits_opcode,
  input  [1:0]   auto_out_0_d_bits_param,
  input  [3:0]   auto_out_0_d_bits_size,
  input  [5:0]   auto_out_0_d_bits_source,
  input          auto_out_0_d_bits_sink,
                 auto_out_0_d_bits_denied,
  input  [127:0] auto_out_0_d_bits_data,
  input          auto_out_0_d_bits_corrupt,
  output         auto_in_1_a_ready,
                 auto_in_1_b_valid,
  output [1:0]   auto_in_1_b_bits_param,
  output [31:0]  auto_in_1_b_bits_address,
  output [15:0]  auto_in_1_b_bits_mask,
  output         auto_in_1_c_ready,
                 auto_in_1_d_valid,
  output [2:0]   auto_in_1_d_bits_opcode,
  output [1:0]   auto_in_1_d_bits_param,
  output [3:0]   auto_in_1_d_bits_size,
  output [4:0]   auto_in_1_d_bits_source,
  output [1:0]   auto_in_1_d_bits_sink,
  output         auto_in_1_d_bits_denied,
  output [127:0] auto_in_1_d_bits_data,
  output         auto_in_1_d_bits_corrupt,
                 auto_in_0_a_ready,
                 auto_in_0_d_valid,
  output [2:0]   auto_in_0_d_bits_opcode,
  output [1:0]   auto_in_0_d_bits_param,
  output [3:0]   auto_in_0_d_bits_size,
  output [1:0]   auto_in_0_d_bits_sink,
  output         auto_in_0_d_bits_denied,
  output [127:0] auto_in_0_d_bits_data,
  output         auto_in_0_d_bits_corrupt,
                 auto_out_1_a_valid,
  output [2:0]   auto_out_1_a_bits_opcode,
                 auto_out_1_a_bits_param,
                 auto_out_1_a_bits_size,
  output [5:0]   auto_out_1_a_bits_source,
  output [31:0]  auto_out_1_a_bits_address,
  output [15:0]  auto_out_1_a_bits_mask,
  output [127:0] auto_out_1_a_bits_data,
  output         auto_out_1_a_bits_corrupt,
                 auto_out_1_b_ready,
                 auto_out_1_c_valid,
  output [2:0]   auto_out_1_c_bits_opcode,
                 auto_out_1_c_bits_param,
                 auto_out_1_c_bits_size,
  output [5:0]   auto_out_1_c_bits_source,
  output [31:0]  auto_out_1_c_bits_address,
  output [127:0] auto_out_1_c_bits_data,
  output         auto_out_1_c_bits_corrupt,
                 auto_out_1_d_ready,
                 auto_out_1_e_valid,
  output [1:0]   auto_out_1_e_bits_sink,
  output         auto_out_0_a_valid,
  output [2:0]   auto_out_0_a_bits_opcode,
                 auto_out_0_a_bits_param,
  output [3:0]   auto_out_0_a_bits_size,
  output [5:0]   auto_out_0_a_bits_source,
  output [30:0]  auto_out_0_a_bits_address,
  output [15:0]  auto_out_0_a_bits_mask,
  output [127:0] auto_out_0_a_bits_data,
  output         auto_out_0_a_bits_corrupt,
                 auto_out_0_d_ready
);

  wire        allowed_3_1;	// @[Arbiter.scala:121:24]
  wire        allowed_3_0;	// @[Arbiter.scala:121:24]
  wire        allowed_2_1;	// @[Arbiter.scala:121:24]
  wire        allowed_2_0;	// @[Arbiter.scala:121:24]
  wire        allowed_1_1;	// @[Arbiter.scala:121:24]
  wire        allowed_1_0;	// @[Arbiter.scala:121:24]
  wire        allowed_1;	// @[Arbiter.scala:121:24]
  wire        allowed_0;	// @[Arbiter.scala:121:24]
  wire [5:0]  portsAOI_filtered_1_bits_source = {5'h10, auto_in_0_a_bits_source};	// @[Xbar.scala:239:55]
  wire [5:0]  portsAOI_filtered_1_1_bits_source = {1'h0, auto_in_1_a_bits_source};	// @[Xbar.scala:239:29]
  wire [1:0]  out_15_bits_sink = {1'h0, auto_out_0_d_bits_sink};	// @[Xbar.scala:325:28]
  wire [3:0]  out_16_bits_size = {1'h0, auto_out_1_d_bits_size};	// @[BundleMap.scala:247:19]
  wire [3:0]  _GEN = auto_in_0_a_bits_address[28:25] ^ 4'hA;	// @[Parameters.scala:137:31]
  wire        requestAIO_0_0 = {auto_in_0_a_bits_address[31], auto_in_0_a_bits_address[28], auto_in_0_a_bits_address[26:25], auto_in_0_a_bits_address[17]} == 5'h0 | {auto_in_0_a_bits_address[31], auto_in_0_a_bits_address[28], auto_in_0_a_bits_address[26:25] ^ 2'h1, auto_in_0_a_bits_address[20], auto_in_0_a_bits_address[17]} == 6'h0 | {auto_in_0_a_bits_address[31], auto_in_0_a_bits_address[28], ~(auto_in_0_a_bits_address[26])} == 3'h0 | {auto_in_0_a_bits_address[31], _GEN[3], _GEN[1:0], auto_in_0_a_bits_address[20], auto_in_0_a_bits_address[17]} == 6'h0;	// @[Bundles.scala:259:74, Parameters.scala:137:{31,45,65}, Xbar.scala:230:69, :365:92]
  wire        requestAIO_0_1 = {auto_in_0_a_bits_address[31], auto_in_0_a_bits_address[28], auto_in_0_a_bits_address[26:25], auto_in_0_a_bits_address[20], ~(auto_in_0_a_bits_address[17])} == 6'h0 | {auto_in_0_a_bits_address[31], ~(auto_in_0_a_bits_address[28]), auto_in_0_a_bits_address[26:25], auto_in_0_a_bits_address[20], auto_in_0_a_bits_address[17]} == 6'h0 | {~(auto_in_0_a_bits_address[31]), auto_in_0_a_bits_address[28]} == 2'h0;	// @[Bundles.scala:259:74, Parameters.scala:137:{31,45,65}, Xbar.scala:365:92]
  wire [3:0]  _GEN_0 = auto_in_1_a_bits_address[28:25] ^ 4'hA;	// @[Parameters.scala:137:31]
  wire        requestAIO_1_0 = {auto_in_1_a_bits_address[31], auto_in_1_a_bits_address[28], auto_in_1_a_bits_address[26:25], auto_in_1_a_bits_address[17]} == 5'h0 | {auto_in_1_a_bits_address[31], auto_in_1_a_bits_address[28], auto_in_1_a_bits_address[26:25] ^ 2'h1, auto_in_1_a_bits_address[20], auto_in_1_a_bits_address[17]} == 6'h0 | {auto_in_1_a_bits_address[31], auto_in_1_a_bits_address[28], ~(auto_in_1_a_bits_address[26])} == 3'h0 | {auto_in_1_a_bits_address[31], _GEN_0[3], _GEN_0[1:0], auto_in_1_a_bits_address[20], auto_in_1_a_bits_address[17]} == 6'h0;	// @[Bundles.scala:259:74, Parameters.scala:137:{31,45,65}, Xbar.scala:230:69, :365:92]
  wire        requestAIO_1_1 = {auto_in_1_a_bits_address[31], auto_in_1_a_bits_address[28], auto_in_1_a_bits_address[26:25], auto_in_1_a_bits_address[20], ~(auto_in_1_a_bits_address[17])} == 6'h0 | {auto_in_1_a_bits_address[31], ~(auto_in_1_a_bits_address[28]), auto_in_1_a_bits_address[26:25], auto_in_1_a_bits_address[20], auto_in_1_a_bits_address[17]} == 6'h0 | {~(auto_in_1_a_bits_address[31]), auto_in_1_a_bits_address[28]} == 2'h0;	// @[Bundles.scala:259:74, Parameters.scala:137:{31,45,65}, Xbar.scala:365:92]
  wire        requestDOI_0_0 = auto_out_0_d_bits_source == 6'h20;	// @[Parameters.scala:46:9, Xbar.scala:239:55]
  wire        requestDOI_1_0 = auto_out_1_d_bits_source == 6'h20;	// @[Parameters.scala:46:9, Xbar.scala:239:55]
  wire        portsAOI_filtered_0_earlyValid = auto_in_0_a_valid & requestAIO_0_0;	// @[Xbar.scala:365:92, :430:50]
  wire        portsAOI_filtered_1_earlyValid = auto_in_0_a_valid & requestAIO_0_1;	// @[Xbar.scala:365:92, :430:50]
  wire        _portsAOI_in_0_a_ready_WIRE = requestAIO_0_0 & auto_out_0_a_ready & allowed_0 | requestAIO_0_1 & auto_out_1_a_ready & allowed_1_0;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Xbar.scala:365:92]
  wire        portsAOI_filtered_1_0_earlyValid = auto_in_1_a_valid & requestAIO_1_0;	// @[Xbar.scala:365:92, :430:50]
  wire        portsAOI_filtered_1_1_earlyValid = auto_in_1_a_valid & requestAIO_1_1;	// @[Xbar.scala:365:92, :430:50]
  wire        _portsAOI_in_1_a_ready_WIRE = requestAIO_1_0 & auto_out_0_a_ready & allowed_1 | requestAIO_1_1 & auto_out_1_a_ready & allowed_1_1;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Xbar.scala:365:92]
  wire        out_10_earlyValid = auto_out_0_d_valid & requestDOI_0_0;	// @[Parameters.scala:46:9, Xbar.scala:181:40]
  wire        out_15_earlyValid = auto_out_0_d_valid & ~(auto_out_0_d_bits_source[5]);	// @[Parameters.scala:54:{10,32}, Xbar.scala:181:40]
  wire        out_11_earlyValid = auto_out_1_d_valid & requestDOI_1_0;	// @[Parameters.scala:46:9, Xbar.scala:181:40]
  wire        out_16_earlyValid = auto_out_1_d_valid & ~(auto_out_1_d_bits_source[5]);	// @[Parameters.scala:54:{10,32}, Xbar.scala:181:40]
  reg  [7:0]  beatsLeft;	// @[Arbiter.scala:87:30]
  wire        idle = beatsLeft == 8'h0;	// @[Arbiter.scala:87:30, :88:28, Edges.scala:220:14]
  wire [1:0]  readys_valid = {portsAOI_filtered_1_0_earlyValid, portsAOI_filtered_0_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:430:50]
  reg  [1:0]  readys_mask;	// @[Arbiter.scala:23:23]
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [1:0]  readys_readys = ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]} & {|_readys_filter_T_1, portsAOI_filtered_1_0_earlyValid | _readys_filter_T_1[0]});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:430:50, package.scala:254:43]
  wire        earlyWinner_0 = readys_readys[0] & portsAOI_filtered_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        earlyWinner_1 = readys_readys[1] & portsAOI_filtered_1_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        _out_0_a_earlyValid_T = portsAOI_filtered_0_earlyValid | portsAOI_filtered_1_0_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:430:50]
  reg         state_0;	// @[Arbiter.scala:116:26]
  reg         state_1;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_0 = idle ? earlyWinner_0 : state_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_1 = idle ? earlyWinner_1 : state_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_0 = idle ? readys_readys[0] : state_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_1 = idle ? readys_readys[1] : state_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        x1_out_1_valid = idle ? _out_0_a_earlyValid_T : state_0 & portsAOI_filtered_0_earlyValid | state_1 & portsAOI_filtered_1_0_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:29, Mux.scala:27:73, Xbar.scala:430:50]
  reg  [7:0]  beatsLeft_1;	// @[Arbiter.scala:87:30]
  wire        idle_1 = beatsLeft_1 == 8'h0;	// @[Arbiter.scala:87:30, :88:28, Edges.scala:220:14]
  wire [1:0]  readys_valid_1 = {portsAOI_filtered_1_1_earlyValid, portsAOI_filtered_1_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:430:50]
  reg  [1:0]  readys_mask_1;	// @[Arbiter.scala:23:23]
  wire [1:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [1:0]  readys_readys_1 = ~({readys_mask_1[1], _readys_filter_T_3[1] | readys_mask_1[0]} & {|_readys_filter_T_3, portsAOI_filtered_1_1_earlyValid | _readys_filter_T_3[0]});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:430:50, package.scala:254:43]
  wire        earlyWinner_1_0 = readys_readys_1[0] & portsAOI_filtered_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        earlyWinner_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        _out_1_a_earlyValid_T = portsAOI_filtered_1_earlyValid | portsAOI_filtered_1_1_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:430:50]
  reg         state_1_0;	// @[Arbiter.scala:116:26]
  reg         state_1_1;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_1_0 = idle_1 ? earlyWinner_1_0 : state_1_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_1_1 = idle_1 ? earlyWinner_1_1 : state_1_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_1_0 = idle_1 ? readys_readys_1[0] : state_1_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_1_1 = idle_1 ? readys_readys_1[1] : state_1_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        bundleOut_1_out_1_valid = idle_1 ? _out_1_a_earlyValid_T : state_1_0 & portsAOI_filtered_1_earlyValid | state_1_1 & portsAOI_filtered_1_1_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:29, Mux.scala:27:73, Xbar.scala:430:50]
  reg  [7:0]  beatsLeft_2;	// @[Arbiter.scala:87:30]
  wire        idle_2 = beatsLeft_2 == 8'h0;	// @[Arbiter.scala:87:30, :88:28, Edges.scala:220:14]
  wire [1:0]  readys_valid_2 = {out_11_earlyValid, out_10_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:181:40]
  reg  [1:0]  readys_mask_2;	// @[Arbiter.scala:23:23]
  wire [1:0]  _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [1:0]  readys_readys_2 = ~({readys_mask_2[1], _readys_filter_T_5[1] | readys_mask_2[0]} & {|_readys_filter_T_5, out_11_earlyValid | _readys_filter_T_5[0]});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:181:40, package.scala:254:43]
  wire        earlyWinner_2_0 = readys_readys_2[0] & out_10_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        earlyWinner_2_1 = readys_readys_2[1] & out_11_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        _sink_ACancel_earlyValid_T = out_10_earlyValid | out_11_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:181:40]
  reg         state_2_0;	// @[Arbiter.scala:116:26]
  reg         state_2_1;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_2_0 = idle_2 ? earlyWinner_2_0 : state_2_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_2_1 = idle_2 ? earlyWinner_2_1 : state_2_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_2_0 = idle_2 ? readys_readys_2[0] : state_2_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_2_1 = idle_2 ? readys_readys_2[1] : state_2_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        out_12_valid = idle_2 ? _sink_ACancel_earlyValid_T : state_2_0 & out_10_earlyValid | state_2_1 & out_11_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:29, Mux.scala:27:73, Xbar.scala:181:40]
  wire        out_12_bits_corrupt = muxStateEarly_2_0 & auto_out_0_d_bits_corrupt | muxStateEarly_2_1 & auto_out_1_d_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_12_bits_denied = muxStateEarly_2_0 & auto_out_0_d_bits_denied | muxStateEarly_2_1 & auto_out_1_d_bits_denied;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [1:0]  out_12_bits_sink = (muxStateEarly_2_0 ? out_15_bits_sink : 2'h0) | (muxStateEarly_2_1 ? auto_out_1_d_bits_sink : 2'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73, Xbar.scala:325:28]
  wire [3:0]  out_12_bits_size = (muxStateEarly_2_0 ? auto_out_0_d_bits_size : 4'h0) | (muxStateEarly_2_1 ? out_16_bits_size : 4'h0);	// @[Arbiter.scala:117:30, BundleMap.scala:247:19, Bundles.scala:259:74, Mux.scala:27:73]
  wire [1:0]  out_12_bits_param = (muxStateEarly_2_0 ? auto_out_0_d_bits_param : 2'h0) | (muxStateEarly_2_1 ? auto_out_1_d_bits_param : 2'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  wire [2:0]  out_12_bits_opcode = (muxStateEarly_2_0 ? auto_out_0_d_bits_opcode : 3'h0) | (muxStateEarly_2_1 ? auto_out_1_d_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  reg  [7:0]  beatsLeft_3;	// @[Arbiter.scala:87:30]
  wire        idle_3 = beatsLeft_3 == 8'h0;	// @[Arbiter.scala:87:30, :88:28, Edges.scala:220:14]
  wire [1:0]  readys_valid_3 = {out_16_earlyValid, out_15_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:181:40]
  reg  [1:0]  readys_mask_3;	// @[Arbiter.scala:23:23]
  wire [1:0]  _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [1:0]  readys_readys_3 = ~({readys_mask_3[1], _readys_filter_T_7[1] | readys_mask_3[0]} & {|_readys_filter_T_7, out_16_earlyValid | _readys_filter_T_7[0]});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:181:40, package.scala:254:43]
  wire        earlyWinner_3_0 = readys_readys_3[0] & out_15_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        earlyWinner_3_1 = readys_readys_3[1] & out_16_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        _sink_ACancel_earlyValid_T_5 = out_15_earlyValid | out_16_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:181:40]
  reg         state_3_0;	// @[Arbiter.scala:116:26]
  reg         state_3_1;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_3_0 = idle_3 ? earlyWinner_3_0 : state_3_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_3_1 = idle_3 ? earlyWinner_3_1 : state_3_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_3_0 = idle_3 ? readys_readys_3[0] : state_3_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_3_1 = idle_3 ? readys_readys_3[1] : state_3_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        out_17_valid = idle_3 ? _sink_ACancel_earlyValid_T_5 : state_3_0 & out_15_earlyValid | state_3_1 & out_16_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:29, Mux.scala:27:73, Xbar.scala:181:40]
  wire        out_17_bits_corrupt = muxStateEarly_3_0 & auto_out_0_d_bits_corrupt | muxStateEarly_3_1 & auto_out_1_d_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_17_bits_denied = muxStateEarly_3_0 & auto_out_0_d_bits_denied | muxStateEarly_3_1 & auto_out_1_d_bits_denied;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [1:0]  out_17_bits_sink = (muxStateEarly_3_0 ? out_15_bits_sink : 2'h0) | (muxStateEarly_3_1 ? auto_out_1_d_bits_sink : 2'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73, Xbar.scala:325:28]
  wire [4:0]  out_1_d_bits_source = (muxStateEarly_3_0 ? auto_out_0_d_bits_source[4:0] : 5'h0) | (muxStateEarly_3_1 ? auto_out_1_d_bits_source[4:0] : 5'h0);	// @[Arbiter.scala:117:30, Mux.scala:27:73, Xbar.scala:230:69]
  wire [3:0]  out_17_bits_size = (muxStateEarly_3_0 ? auto_out_0_d_bits_size : 4'h0) | (muxStateEarly_3_1 ? out_16_bits_size : 4'h0);	// @[Arbiter.scala:117:30, BundleMap.scala:247:19, Bundles.scala:259:74, Mux.scala:27:73]
  wire [1:0]  out_17_bits_param = (muxStateEarly_3_0 ? auto_out_0_d_bits_param : 2'h0) | (muxStateEarly_3_1 ? auto_out_1_d_bits_param : 2'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  wire [2:0]  out_17_bits_opcode = (muxStateEarly_3_0 ? auto_out_0_d_bits_opcode : 3'h0) | (muxStateEarly_3_1 ? auto_out_1_d_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [1:0]  _readys_mask_T_5 = readys_readys_1 & readys_valid_1;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [1:0]  _readys_mask_T_10 = readys_readys_2 & readys_valid_2;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [1:0]  _readys_mask_T_15 = readys_readys_3 & readys_valid_3;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [26:0] _beatsAI_decode_T_1 = 27'hFFF << auto_in_0_a_bits_size;	// @[package.scala:235:71]
  wire [26:0] _beatsAI_decode_T_5 = 27'hFFF << auto_in_1_a_bits_size;	// @[package.scala:235:71]
  wire [26:0] _beatsDO_decode_T_1 = 27'hFFF << auto_out_0_d_bits_size;	// @[package.scala:235:71]
  wire [20:0] _beatsDO_decode_T_5 = 21'h3F << auto_out_1_d_bits_size;	// @[package.scala:235:71]
  wire        latch = idle & auto_out_0_a_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_0 = readys_readys[0] & portsAOI_filtered_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        winnerQual_1 = readys_readys[1] & portsAOI_filtered_1_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        latch_1 = idle_1 & auto_out_1_a_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_1_0 = readys_readys_1[0] & portsAOI_filtered_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        winnerQual_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        latch_2 = idle_2 & auto_in_0_d_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_2_0 = readys_readys_2[0] & out_10_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        winnerQual_2_1 = readys_readys_2[1] & out_11_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        latch_3 = idle_3 & auto_in_1_d_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_3_0 = readys_readys_3[0] & out_15_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        winnerQual_3_1 = readys_readys_3[1] & out_16_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 8'h0;	// @[Arbiter.scala:87:30, Edges.scala:220:14]
      readys_mask <= 2'h3;	// @[Arbiter.scala:23:23, Parameters.scala:57:20]
      state_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_1 <= 1'h0;	// @[Arbiter.scala:116:26]
      beatsLeft_1 <= 8'h0;	// @[Arbiter.scala:87:30, Edges.scala:220:14]
      readys_mask_1 <= 2'h3;	// @[Arbiter.scala:23:23, Parameters.scala:57:20]
      state_1_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_1_1 <= 1'h0;	// @[Arbiter.scala:116:26]
      beatsLeft_2 <= 8'h0;	// @[Arbiter.scala:87:30, Edges.scala:220:14]
      readys_mask_2 <= 2'h3;	// @[Arbiter.scala:23:23, Parameters.scala:57:20]
      state_2_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_2_1 <= 1'h0;	// @[Arbiter.scala:116:26]
      beatsLeft_3 <= 8'h0;	// @[Arbiter.scala:87:30, Edges.scala:220:14]
      readys_mask_3 <= 2'h3;	// @[Arbiter.scala:23:23, Parameters.scala:57:20]
      state_3_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_3_1 <= 1'h0;	// @[Arbiter.scala:116:26]
    end
    else begin
      if (latch)	// @[Arbiter.scala:89:24]
        beatsLeft <= (winnerQual_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_1[11:4]) : 8'h0) | (winnerQual_1 & ~(auto_in_1_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_5[11:4]) : 8'h0);	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Edges.scala:91:{28,37}, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft <= beatsLeft - {7'h0, auto_out_0_a_ready & x1_out_1_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch & (|readys_valid))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};	// @[Arbiter.scala:23:23, :28:29, package.scala:245:{43,53}]
      if (idle) begin	// @[Arbiter.scala:88:28]
        state_0 <= winnerQual_0;	// @[Arbiter.scala:98:79, :116:26]
        state_1 <= winnerQual_1;	// @[Arbiter.scala:98:79, :116:26]
      end
      if (latch_1)	// @[Arbiter.scala:89:24]
        beatsLeft_1 <= (winnerQual_1_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_1[11:4]) : 8'h0) | (winnerQual_1_1 & ~(auto_in_1_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_5[11:4]) : 8'h0);	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Edges.scala:91:{28,37}, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft_1 <= beatsLeft_1 - {7'h0, auto_out_1_a_ready & bundleOut_1_out_1_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch_1 & (|readys_valid_1))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask_1 <= _readys_mask_T_5 | {_readys_mask_T_5[0], 1'h0};	// @[Arbiter.scala:23:23, :28:29, package.scala:245:{43,53}]
      if (idle_1) begin	// @[Arbiter.scala:88:28]
        state_1_0 <= winnerQual_1_0;	// @[Arbiter.scala:98:79, :116:26]
        state_1_1 <= winnerQual_1_1;	// @[Arbiter.scala:98:79, :116:26]
      end
      if (latch_2)	// @[Arbiter.scala:89:24]
        beatsLeft_2 <= (winnerQual_2_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[11:4]) : 8'h0) | {6'h0, winnerQual_2_1 & auto_out_1_d_bits_opcode[0] ? ~(_beatsDO_decode_T_5[5:4]) : 2'h0};	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Bundles.scala:259:74, Edges.scala:105:36, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft_2 <= beatsLeft_2 - {7'h0, auto_in_0_d_ready & out_12_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch_2 & (|readys_valid_2))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask_2 <= _readys_mask_T_10 | {_readys_mask_T_10[0], 1'h0};	// @[Arbiter.scala:23:23, :28:29, package.scala:245:{43,53}]
      if (idle_2) begin	// @[Arbiter.scala:88:28]
        state_2_0 <= winnerQual_2_0;	// @[Arbiter.scala:98:79, :116:26]
        state_2_1 <= winnerQual_2_1;	// @[Arbiter.scala:98:79, :116:26]
      end
      if (latch_3)	// @[Arbiter.scala:89:24]
        beatsLeft_3 <= (winnerQual_3_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[11:4]) : 8'h0) | {6'h0, winnerQual_3_1 & auto_out_1_d_bits_opcode[0] ? ~(_beatsDO_decode_T_5[5:4]) : 2'h0};	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Bundles.scala:259:74, Edges.scala:105:36, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft_3 <= beatsLeft_3 - {7'h0, auto_in_1_d_ready & out_17_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch_3 & (|readys_valid_3))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask_3 <= _readys_mask_T_15 | {_readys_mask_T_15[0], 1'h0};	// @[Arbiter.scala:23:23, :28:29, package.scala:245:{43,53}]
      if (idle_3) begin	// @[Arbiter.scala:88:28]
        state_3_0 <= winnerQual_3_0;	// @[Arbiter.scala:98:79, :116:26]
        state_3_1 <= winnerQual_3_1;	// @[Arbiter.scala:98:79, :116:26]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[Arbiter.scala:105:13]
      if (~reset & ~(~earlyWinner_0 | ~earlyWinner_1)) begin	// @[Arbiter.scala:97:79, :105:{13,61,64,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~_out_0_a_earlyValid_T | earlyWinner_0 | earlyWinner_1)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
      if (~reset & ~(~earlyWinner_1_0 | ~earlyWinner_1_1)) begin	// @[Arbiter.scala:97:79, :105:{13,61,64,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~_out_1_a_earlyValid_T | earlyWinner_1_0 | earlyWinner_1_1)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
      if (~reset & ~(~earlyWinner_2_0 | ~earlyWinner_2_1)) begin	// @[Arbiter.scala:97:79, :105:{13,61,64,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~_sink_ACancel_earlyValid_T | earlyWinner_2_0 | earlyWinner_2_1)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
      if (~reset & ~(~earlyWinner_3_0 | ~earlyWinner_3_1)) begin	// @[Arbiter.scala:97:79, :105:{13,61,64,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~_sink_ACancel_earlyValid_T_5 | earlyWinner_3_0 | earlyWinner_3_1)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        beatsLeft = _RANDOM_0[7:0];	// @[Arbiter.scala:87:30]
        readys_mask = _RANDOM_0[9:8];	// @[Arbiter.scala:23:23, :87:30]
        state_0 = _RANDOM_0[10];	// @[Arbiter.scala:87:30, :116:26]
        state_1 = _RANDOM_0[11];	// @[Arbiter.scala:87:30, :116:26]
        beatsLeft_1 = _RANDOM_0[19:12];	// @[Arbiter.scala:87:30]
        readys_mask_1 = _RANDOM_0[21:20];	// @[Arbiter.scala:23:23, :87:30]
        state_1_0 = _RANDOM_0[22];	// @[Arbiter.scala:87:30, :116:26]
        state_1_1 = _RANDOM_0[23];	// @[Arbiter.scala:87:30, :116:26]
        beatsLeft_2 = _RANDOM_0[31:24];	// @[Arbiter.scala:87:30]
        readys_mask_2 = _RANDOM_1[1:0];	// @[Arbiter.scala:23:23]
        state_2_0 = _RANDOM_1[2];	// @[Arbiter.scala:23:23, :116:26]
        state_2_1 = _RANDOM_1[3];	// @[Arbiter.scala:23:23, :116:26]
        beatsLeft_3 = _RANDOM_1[11:4];	// @[Arbiter.scala:23:23, :87:30]
        readys_mask_3 = _RANDOM_1[13:12];	// @[Arbiter.scala:23:23]
        state_3_0 = _RANDOM_1[14];	// @[Arbiter.scala:23:23, :116:26]
        state_3_1 = _RANDOM_1[15];	// @[Arbiter.scala:23:23, :116:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  TLMonitor monitor (	// @[Nodes.scala:24:25]
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_portsAOI_in_0_a_ready_WIRE),	// @[Mux.scala:27:73]
    .io_in_a_valid        (auto_in_0_a_valid),
    .io_in_a_bits_opcode  (auto_in_0_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_0_a_bits_param),
    .io_in_a_bits_size    (auto_in_0_a_bits_size),
    .io_in_a_bits_source  (auto_in_0_a_bits_source),
    .io_in_a_bits_address (auto_in_0_a_bits_address),
    .io_in_a_bits_mask    (auto_in_0_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_0_a_bits_corrupt),
    .io_in_d_ready        (auto_in_0_d_ready),
    .io_in_d_valid        (out_12_valid),	// @[Arbiter.scala:125:29]
    .io_in_d_bits_opcode  (out_12_bits_opcode),	// @[Mux.scala:27:73]
    .io_in_d_bits_param   (out_12_bits_param),	// @[Mux.scala:27:73]
    .io_in_d_bits_size    (out_12_bits_size),	// @[Mux.scala:27:73]
    .io_in_d_bits_sink    (out_12_bits_sink),	// @[Mux.scala:27:73]
    .io_in_d_bits_denied  (out_12_bits_denied),	// @[Mux.scala:27:73]
    .io_in_d_bits_corrupt (out_12_bits_corrupt)	// @[Mux.scala:27:73]
  );
  TLMonitor_1 monitor_1 (	// @[Nodes.scala:24:25]
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_portsAOI_in_1_a_ready_WIRE),	// @[Mux.scala:27:73]
    .io_in_a_valid        (auto_in_1_a_valid),
    .io_in_a_bits_opcode  (auto_in_1_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_1_a_bits_param),
    .io_in_a_bits_size    (auto_in_1_a_bits_size),
    .io_in_a_bits_source  (auto_in_1_a_bits_source),
    .io_in_a_bits_address (auto_in_1_a_bits_address),
    .io_in_a_bits_mask    (auto_in_1_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_1_a_bits_corrupt),
    .io_in_b_valid        (auto_out_1_b_valid),
    .io_in_b_bits_param   (auto_out_1_b_bits_param),
    .io_in_b_bits_size    (4'h6),	// @[BundleMap.scala:247:19]
    .io_in_b_bits_source  (5'h0),	// @[Xbar.scala:230:69]
    .io_in_b_bits_address (auto_out_1_b_bits_address),
    .io_in_b_bits_mask    (auto_out_1_b_bits_mask),
    .io_in_c_ready        (auto_out_1_c_ready),
    .io_in_c_valid        (auto_in_1_c_valid),
    .io_in_c_bits_opcode  (auto_in_1_c_bits_opcode),
    .io_in_c_bits_param   (auto_in_1_c_bits_param),
    .io_in_c_bits_size    (auto_in_1_c_bits_size),
    .io_in_c_bits_source  (auto_in_1_c_bits_source),
    .io_in_c_bits_address (auto_in_1_c_bits_address),
    .io_in_c_bits_corrupt (auto_in_1_c_bits_corrupt),
    .io_in_d_ready        (auto_in_1_d_ready),
    .io_in_d_valid        (out_17_valid),	// @[Arbiter.scala:125:29]
    .io_in_d_bits_opcode  (out_17_bits_opcode),	// @[Mux.scala:27:73]
    .io_in_d_bits_param   (out_17_bits_param),	// @[Mux.scala:27:73]
    .io_in_d_bits_size    (out_17_bits_size),	// @[Mux.scala:27:73]
    .io_in_d_bits_source  (out_1_d_bits_source),	// @[Mux.scala:27:73]
    .io_in_d_bits_sink    (out_17_bits_sink),	// @[Mux.scala:27:73]
    .io_in_d_bits_denied  (out_17_bits_denied),	// @[Mux.scala:27:73]
    .io_in_d_bits_corrupt (out_17_bits_corrupt),	// @[Mux.scala:27:73]
    .io_in_e_valid        (auto_in_1_e_valid),
    .io_in_e_bits_sink    (auto_in_1_e_bits_sink)
  );
  assign auto_in_1_a_ready = _portsAOI_in_1_a_ready_WIRE;	// @[Mux.scala:27:73]
  assign auto_in_1_b_valid = auto_out_1_b_valid;
  assign auto_in_1_b_bits_param = auto_out_1_b_bits_param;
  assign auto_in_1_b_bits_address = auto_out_1_b_bits_address;
  assign auto_in_1_b_bits_mask = auto_out_1_b_bits_mask;
  assign auto_in_1_c_ready = auto_out_1_c_ready;
  assign auto_in_1_d_valid = out_17_valid;	// @[Arbiter.scala:125:29]
  assign auto_in_1_d_bits_opcode = out_17_bits_opcode;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_param = out_17_bits_param;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_size = out_17_bits_size;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_source = out_1_d_bits_source;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_sink = out_17_bits_sink;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_denied = out_17_bits_denied;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_data = (muxStateEarly_3_0 ? auto_out_0_d_bits_data : 128'h0) | (muxStateEarly_3_1 ? auto_out_1_d_bits_data : 128'h0);	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  assign auto_in_1_d_bits_corrupt = out_17_bits_corrupt;	// @[Mux.scala:27:73]
  assign auto_in_0_a_ready = _portsAOI_in_0_a_ready_WIRE;	// @[Mux.scala:27:73]
  assign auto_in_0_d_valid = out_12_valid;	// @[Arbiter.scala:125:29]
  assign auto_in_0_d_bits_opcode = out_12_bits_opcode;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_param = out_12_bits_param;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_size = out_12_bits_size;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_sink = out_12_bits_sink;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_denied = out_12_bits_denied;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_data = (muxStateEarly_2_0 ? auto_out_0_d_bits_data : 128'h0) | (muxStateEarly_2_1 ? auto_out_1_d_bits_data : 128'h0);	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  assign auto_in_0_d_bits_corrupt = out_12_bits_corrupt;	// @[Mux.scala:27:73]
  assign auto_out_1_a_valid = bundleOut_1_out_1_valid;	// @[Arbiter.scala:125:29]
  assign auto_out_1_a_bits_opcode = (muxStateEarly_1_0 ? auto_in_0_a_bits_opcode : 3'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_param = (muxStateEarly_1_0 ? auto_in_0_a_bits_param : 3'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_param : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_size = (muxStateEarly_1_0 ? auto_in_0_a_bits_size[2:0] : 3'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_size[2:0] : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_source = (muxStateEarly_1_0 ? portsAOI_filtered_1_bits_source : 6'h0) | (muxStateEarly_1_1 ? portsAOI_filtered_1_1_bits_source : 6'h0);	// @[Arbiter.scala:117:30, Mux.scala:27:73, Xbar.scala:239:{29,55}]
  assign auto_out_1_a_bits_address = (muxStateEarly_1_0 ? auto_in_0_a_bits_address : 32'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_address : 32'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_mask = (muxStateEarly_1_0 ? auto_in_0_a_bits_mask : 16'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_mask : 16'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_data = (muxStateEarly_1_0 ? auto_in_0_a_bits_data : 128'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_data : 128'h0);	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  assign auto_out_1_a_bits_corrupt = muxStateEarly_1_0 & auto_in_0_a_bits_corrupt | muxStateEarly_1_1 & auto_in_1_a_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  assign auto_out_1_b_ready = auto_in_1_b_ready;
  assign auto_out_1_c_valid = auto_in_1_c_valid;
  assign auto_out_1_c_bits_opcode = auto_in_1_c_bits_opcode;
  assign auto_out_1_c_bits_param = auto_in_1_c_bits_param;
  assign auto_out_1_c_bits_size = auto_in_1_c_bits_size[2:0];	// @[BundleMap.scala:247:19]
  assign auto_out_1_c_bits_source = {1'h0, auto_in_1_c_bits_source};	// @[Xbar.scala:261:29]
  assign auto_out_1_c_bits_address = auto_in_1_c_bits_address;
  assign auto_out_1_c_bits_data = auto_in_1_c_bits_data;
  assign auto_out_1_c_bits_corrupt = auto_in_1_c_bits_corrupt;
  assign auto_out_1_d_ready = requestDOI_1_0 & auto_in_0_d_ready & allowed_2_1 | ~(auto_out_1_d_bits_source[5]) & auto_in_1_d_ready & allowed_3_1;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Parameters.scala:46:9, :54:{10,32}]
  assign auto_out_1_e_valid = auto_in_1_e_valid;
  assign auto_out_1_e_bits_sink = auto_in_1_e_bits_sink;
  assign auto_out_0_a_valid = x1_out_1_valid;	// @[Arbiter.scala:125:29]
  assign auto_out_0_a_bits_opcode = (muxStateEarly_0 ? auto_in_0_a_bits_opcode : 3'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_param = (muxStateEarly_0 ? auto_in_0_a_bits_param : 3'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_param : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_size = (muxStateEarly_0 ? auto_in_0_a_bits_size : 4'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_size : 4'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_source = (muxStateEarly_0 ? portsAOI_filtered_1_bits_source : 6'h0) | (muxStateEarly_1 ? portsAOI_filtered_1_1_bits_source : 6'h0);	// @[Arbiter.scala:117:30, Mux.scala:27:73, Xbar.scala:239:{29,55}]
  assign auto_out_0_a_bits_address = (muxStateEarly_0 ? auto_in_0_a_bits_address[30:0] : 31'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_address[30:0] : 31'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_mask = (muxStateEarly_0 ? auto_in_0_a_bits_mask : 16'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_mask : 16'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_data = (muxStateEarly_0 ? auto_in_0_a_bits_data : 128'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_data : 128'h0);	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  assign auto_out_0_a_bits_corrupt = muxStateEarly_0 & auto_in_0_a_bits_corrupt | muxStateEarly_1 & auto_in_1_a_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  assign auto_out_0_d_ready = requestDOI_0_0 & auto_in_0_d_ready & allowed_2_0 | ~(auto_out_0_d_bits_source[5]) & auto_in_1_d_ready & allowed_3_0;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Parameters.scala:46:9, :54:{10,32}]
endmodule

