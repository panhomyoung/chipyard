// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module RenameFreeList_1(
  input        clock,
               reset,
               io_reqs_0,
               io_reqs_1,
               io_reqs_2,
               io_reqs_3,
               io_reqs_4,
               io_dealloc_pregs_0_valid,
  input  [5:0] io_dealloc_pregs_0_bits,
  input        io_dealloc_pregs_1_valid,
  input  [5:0] io_dealloc_pregs_1_bits,
  input        io_dealloc_pregs_2_valid,
  input  [5:0] io_dealloc_pregs_2_bits,
  input        io_dealloc_pregs_3_valid,
  input  [5:0] io_dealloc_pregs_3_bits,
  input        io_dealloc_pregs_4_valid,
  input  [5:0] io_dealloc_pregs_4_bits,
  input        io_ren_br_tags_0_valid,
  input  [3:0] io_ren_br_tags_0_bits,
  input        io_ren_br_tags_1_valid,
  input  [3:0] io_ren_br_tags_1_bits,
  input        io_ren_br_tags_2_valid,
  input  [3:0] io_ren_br_tags_2_bits,
  input        io_ren_br_tags_3_valid,
  input  [3:0] io_ren_br_tags_3_bits,
  input        io_ren_br_tags_4_valid,
  input  [3:0] io_ren_br_tags_4_bits,
               io_brupdate_b2_uop_br_tag,
  input        io_brupdate_b2_mispredict,
               io_debug_pipeline_empty,
  output       io_alloc_pregs_0_valid,
  output [5:0] io_alloc_pregs_0_bits,
  output       io_alloc_pregs_1_valid,
  output [5:0] io_alloc_pregs_1_bits,
  output       io_alloc_pregs_2_valid,
  output [5:0] io_alloc_pregs_2_bits,
  output       io_alloc_pregs_3_valid,
  output [5:0] io_alloc_pregs_3_bits,
  output       io_alloc_pregs_4_valid,
  output [5:0] io_alloc_pregs_4_bits
);

  reg  [5:0]        r_sel_4;	// @[Reg.scala:19:16]
  reg  [5:0]        r_sel_3;	// @[Reg.scala:19:16]
  reg  [5:0]        r_sel_2;	// @[Reg.scala:19:16]
  reg  [5:0]        r_sel_1;	// @[Reg.scala:19:16]
  reg  [5:0]        r_sel;	// @[Reg.scala:19:16]
  reg  [63:0]       free_list;	// @[rename-freelist.scala:50:26]
  reg  [63:0]       br_alloc_lists_0;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_1;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_2;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_3;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_4;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_5;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_6;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_7;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_8;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_9;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_10;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_11;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_12;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_13;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_14;	// @[rename-freelist.scala:51:27]
  reg  [63:0]       br_alloc_lists_15;	// @[rename-freelist.scala:51:27]
  wire [63:0]       sels_0 = free_list[0] ? 64'h1 : free_list[1] ? 64'h2 : free_list[2] ? 64'h4 : free_list[3] ? 64'h8 : free_list[4] ? 64'h10 : free_list[5] ? 64'h20 : free_list[6] ? 64'h40 : free_list[7] ? 64'h80 : free_list[8] ? 64'h100 : free_list[9] ? 64'h200 : free_list[10] ? 64'h400 : free_list[11] ? 64'h800 : free_list[12] ? 64'h1000 : free_list[13] ? 64'h2000 : free_list[14] ? 64'h4000 : free_list[15] ? 64'h8000 : free_list[16] ? 64'h10000 : free_list[17] ? 64'h20000 : free_list[18] ? 64'h40000 : free_list[19] ? 64'h80000 : free_list[20] ? 64'h100000 : free_list[21] ? 64'h200000 : free_list[22] ? 64'h400000 : free_list[23] ? 64'h800000 : free_list[24] ? 64'h1000000 : free_list[25] ? 64'h2000000 : free_list[26] ? 64'h4000000 : free_list[27] ? 64'h8000000 : free_list[28] ? 64'h10000000 : free_list[29] ? 64'h20000000 : free_list[30] ? 64'h40000000 : free_list[31] ? 64'h80000000 : free_list[32] ? 64'h100000000 : free_list[33] ? 64'h200000000 : free_list[34] ? 64'h400000000 : free_list[35] ? 64'h800000000 : free_list[36] ? 64'h1000000000 : free_list[37] ? 64'h2000000000 : free_list[38] ? 64'h4000000000 : free_list[39] ? 64'h8000000000 : free_list[40] ? 64'h10000000000 : free_list[41] ? 64'h20000000000 : free_list[42] ? 64'h40000000000 : free_list[43] ? 64'h80000000000 : free_list[44] ? 64'h100000000000 : free_list[45] ? 64'h200000000000 : free_list[46] ? 64'h400000000000 : free_list[47] ? 64'h800000000000 : free_list[48] ? 64'h1000000000000 : free_list[49] ? 64'h2000000000000 : free_list[50] ? 64'h4000000000000 : free_list[51] ? 64'h8000000000000 : free_list[52] ? 64'h10000000000000 : free_list[53] ? 64'h20000000000000 : free_list[54] ? 64'h40000000000000 : free_list[55] ? 64'h80000000000000 : free_list[56] ? 64'h100000000000000 : free_list[57] ? 64'h200000000000000 : free_list[58] ? 64'h400000000000000 : free_list[59] ? 64'h800000000000000 : free_list[60] ? 64'h1000000000000000 : free_list[61] ? 64'h2000000000000000 : free_list[62] ? 64'h4000000000000000 : {free_list[63], 63'h0};	// @[Mux.scala:47:70, OneHot.scala:84:71, rename-freelist.scala:50:{26,45}]
  wire [63:0]       _sels_T_1 = free_list & ~sels_0;	// @[Mux.scala:47:70, rename-freelist.scala:50:26, util.scala:410:{19,21}]
  wire [63:0]       sels_1 = _sels_T_1[0] ? 64'h1 : _sels_T_1[1] ? 64'h2 : _sels_T_1[2] ? 64'h4 : _sels_T_1[3] ? 64'h8 : _sels_T_1[4] ? 64'h10 : _sels_T_1[5] ? 64'h20 : _sels_T_1[6] ? 64'h40 : _sels_T_1[7] ? 64'h80 : _sels_T_1[8] ? 64'h100 : _sels_T_1[9] ? 64'h200 : _sels_T_1[10] ? 64'h400 : _sels_T_1[11] ? 64'h800 : _sels_T_1[12] ? 64'h1000 : _sels_T_1[13] ? 64'h2000 : _sels_T_1[14] ? 64'h4000 : _sels_T_1[15] ? 64'h8000 : _sels_T_1[16] ? 64'h10000 : _sels_T_1[17] ? 64'h20000 : _sels_T_1[18] ? 64'h40000 : _sels_T_1[19] ? 64'h80000 : _sels_T_1[20] ? 64'h100000 : _sels_T_1[21] ? 64'h200000 : _sels_T_1[22] ? 64'h400000 : _sels_T_1[23] ? 64'h800000 : _sels_T_1[24] ? 64'h1000000 : _sels_T_1[25] ? 64'h2000000 : _sels_T_1[26] ? 64'h4000000 : _sels_T_1[27] ? 64'h8000000 : _sels_T_1[28] ? 64'h10000000 : _sels_T_1[29] ? 64'h20000000 : _sels_T_1[30] ? 64'h40000000 : _sels_T_1[31] ? 64'h80000000 : _sels_T_1[32] ? 64'h100000000 : _sels_T_1[33] ? 64'h200000000 : _sels_T_1[34] ? 64'h400000000 : _sels_T_1[35] ? 64'h800000000 : _sels_T_1[36] ? 64'h1000000000 : _sels_T_1[37] ? 64'h2000000000 : _sels_T_1[38] ? 64'h4000000000 : _sels_T_1[39] ? 64'h8000000000 : _sels_T_1[40] ? 64'h10000000000 : _sels_T_1[41] ? 64'h20000000000 : _sels_T_1[42] ? 64'h40000000000 : _sels_T_1[43] ? 64'h80000000000 : _sels_T_1[44] ? 64'h100000000000 : _sels_T_1[45] ? 64'h200000000000 : _sels_T_1[46] ? 64'h400000000000 : _sels_T_1[47] ? 64'h800000000000 : _sels_T_1[48] ? 64'h1000000000000 : _sels_T_1[49] ? 64'h2000000000000 : _sels_T_1[50] ? 64'h4000000000000 : _sels_T_1[51] ? 64'h8000000000000 : _sels_T_1[52] ? 64'h10000000000000 : _sels_T_1[53] ? 64'h20000000000000 : _sels_T_1[54] ? 64'h40000000000000 : _sels_T_1[55] ? 64'h80000000000000 : _sels_T_1[56] ? 64'h100000000000000 : _sels_T_1[57] ? 64'h200000000000000 : _sels_T_1[58] ? 64'h400000000000000 : _sels_T_1[59] ? 64'h800000000000000 : _sels_T_1[60] ? 64'h1000000000000000 : _sels_T_1[61] ? 64'h2000000000000000 : _sels_T_1[62] ? 64'h4000000000000000 : {_sels_T_1[63], 63'h0};	// @[Mux.scala:47:70, OneHot.scala:84:71, rename-freelist.scala:50:45, util.scala:410:19]
  wire [63:0]       _sels_T_3 = _sels_T_1 & ~sels_1;	// @[Mux.scala:47:70, util.scala:410:{19,21}]
  wire [63:0]       sels_2 = _sels_T_3[0] ? 64'h1 : _sels_T_3[1] ? 64'h2 : _sels_T_3[2] ? 64'h4 : _sels_T_3[3] ? 64'h8 : _sels_T_3[4] ? 64'h10 : _sels_T_3[5] ? 64'h20 : _sels_T_3[6] ? 64'h40 : _sels_T_3[7] ? 64'h80 : _sels_T_3[8] ? 64'h100 : _sels_T_3[9] ? 64'h200 : _sels_T_3[10] ? 64'h400 : _sels_T_3[11] ? 64'h800 : _sels_T_3[12] ? 64'h1000 : _sels_T_3[13] ? 64'h2000 : _sels_T_3[14] ? 64'h4000 : _sels_T_3[15] ? 64'h8000 : _sels_T_3[16] ? 64'h10000 : _sels_T_3[17] ? 64'h20000 : _sels_T_3[18] ? 64'h40000 : _sels_T_3[19] ? 64'h80000 : _sels_T_3[20] ? 64'h100000 : _sels_T_3[21] ? 64'h200000 : _sels_T_3[22] ? 64'h400000 : _sels_T_3[23] ? 64'h800000 : _sels_T_3[24] ? 64'h1000000 : _sels_T_3[25] ? 64'h2000000 : _sels_T_3[26] ? 64'h4000000 : _sels_T_3[27] ? 64'h8000000 : _sels_T_3[28] ? 64'h10000000 : _sels_T_3[29] ? 64'h20000000 : _sels_T_3[30] ? 64'h40000000 : _sels_T_3[31] ? 64'h80000000 : _sels_T_3[32] ? 64'h100000000 : _sels_T_3[33] ? 64'h200000000 : _sels_T_3[34] ? 64'h400000000 : _sels_T_3[35] ? 64'h800000000 : _sels_T_3[36] ? 64'h1000000000 : _sels_T_3[37] ? 64'h2000000000 : _sels_T_3[38] ? 64'h4000000000 : _sels_T_3[39] ? 64'h8000000000 : _sels_T_3[40] ? 64'h10000000000 : _sels_T_3[41] ? 64'h20000000000 : _sels_T_3[42] ? 64'h40000000000 : _sels_T_3[43] ? 64'h80000000000 : _sels_T_3[44] ? 64'h100000000000 : _sels_T_3[45] ? 64'h200000000000 : _sels_T_3[46] ? 64'h400000000000 : _sels_T_3[47] ? 64'h800000000000 : _sels_T_3[48] ? 64'h1000000000000 : _sels_T_3[49] ? 64'h2000000000000 : _sels_T_3[50] ? 64'h4000000000000 : _sels_T_3[51] ? 64'h8000000000000 : _sels_T_3[52] ? 64'h10000000000000 : _sels_T_3[53] ? 64'h20000000000000 : _sels_T_3[54] ? 64'h40000000000000 : _sels_T_3[55] ? 64'h80000000000000 : _sels_T_3[56] ? 64'h100000000000000 : _sels_T_3[57] ? 64'h200000000000000 : _sels_T_3[58] ? 64'h400000000000000 : _sels_T_3[59] ? 64'h800000000000000 : _sels_T_3[60] ? 64'h1000000000000000 : _sels_T_3[61] ? 64'h2000000000000000 : _sels_T_3[62] ? 64'h4000000000000000 : {_sels_T_3[63], 63'h0};	// @[Mux.scala:47:70, OneHot.scala:84:71, rename-freelist.scala:50:45, util.scala:410:19]
  wire [63:0]       _sels_T_5 = _sels_T_3 & ~sels_2;	// @[Mux.scala:47:70, util.scala:410:{19,21}]
  wire [63:0]       sels_3 = _sels_T_5[0] ? 64'h1 : _sels_T_5[1] ? 64'h2 : _sels_T_5[2] ? 64'h4 : _sels_T_5[3] ? 64'h8 : _sels_T_5[4] ? 64'h10 : _sels_T_5[5] ? 64'h20 : _sels_T_5[6] ? 64'h40 : _sels_T_5[7] ? 64'h80 : _sels_T_5[8] ? 64'h100 : _sels_T_5[9] ? 64'h200 : _sels_T_5[10] ? 64'h400 : _sels_T_5[11] ? 64'h800 : _sels_T_5[12] ? 64'h1000 : _sels_T_5[13] ? 64'h2000 : _sels_T_5[14] ? 64'h4000 : _sels_T_5[15] ? 64'h8000 : _sels_T_5[16] ? 64'h10000 : _sels_T_5[17] ? 64'h20000 : _sels_T_5[18] ? 64'h40000 : _sels_T_5[19] ? 64'h80000 : _sels_T_5[20] ? 64'h100000 : _sels_T_5[21] ? 64'h200000 : _sels_T_5[22] ? 64'h400000 : _sels_T_5[23] ? 64'h800000 : _sels_T_5[24] ? 64'h1000000 : _sels_T_5[25] ? 64'h2000000 : _sels_T_5[26] ? 64'h4000000 : _sels_T_5[27] ? 64'h8000000 : _sels_T_5[28] ? 64'h10000000 : _sels_T_5[29] ? 64'h20000000 : _sels_T_5[30] ? 64'h40000000 : _sels_T_5[31] ? 64'h80000000 : _sels_T_5[32] ? 64'h100000000 : _sels_T_5[33] ? 64'h200000000 : _sels_T_5[34] ? 64'h400000000 : _sels_T_5[35] ? 64'h800000000 : _sels_T_5[36] ? 64'h1000000000 : _sels_T_5[37] ? 64'h2000000000 : _sels_T_5[38] ? 64'h4000000000 : _sels_T_5[39] ? 64'h8000000000 : _sels_T_5[40] ? 64'h10000000000 : _sels_T_5[41] ? 64'h20000000000 : _sels_T_5[42] ? 64'h40000000000 : _sels_T_5[43] ? 64'h80000000000 : _sels_T_5[44] ? 64'h100000000000 : _sels_T_5[45] ? 64'h200000000000 : _sels_T_5[46] ? 64'h400000000000 : _sels_T_5[47] ? 64'h800000000000 : _sels_T_5[48] ? 64'h1000000000000 : _sels_T_5[49] ? 64'h2000000000000 : _sels_T_5[50] ? 64'h4000000000000 : _sels_T_5[51] ? 64'h8000000000000 : _sels_T_5[52] ? 64'h10000000000000 : _sels_T_5[53] ? 64'h20000000000000 : _sels_T_5[54] ? 64'h40000000000000 : _sels_T_5[55] ? 64'h80000000000000 : _sels_T_5[56] ? 64'h100000000000000 : _sels_T_5[57] ? 64'h200000000000000 : _sels_T_5[58] ? 64'h400000000000000 : _sels_T_5[59] ? 64'h800000000000000 : _sels_T_5[60] ? 64'h1000000000000000 : _sels_T_5[61] ? 64'h2000000000000000 : _sels_T_5[62] ? 64'h4000000000000000 : {_sels_T_5[63], 63'h0};	// @[Mux.scala:47:70, OneHot.scala:84:71, rename-freelist.scala:50:45, util.scala:410:19]
  wire [63:0]       _sels_T_7 = _sels_T_5 & ~sels_3;	// @[Mux.scala:47:70, util.scala:410:{19,21}]
  wire [63:0]       sels_4 = _sels_T_7[0] ? 64'h1 : _sels_T_7[1] ? 64'h2 : _sels_T_7[2] ? 64'h4 : _sels_T_7[3] ? 64'h8 : _sels_T_7[4] ? 64'h10 : _sels_T_7[5] ? 64'h20 : _sels_T_7[6] ? 64'h40 : _sels_T_7[7] ? 64'h80 : _sels_T_7[8] ? 64'h100 : _sels_T_7[9] ? 64'h200 : _sels_T_7[10] ? 64'h400 : _sels_T_7[11] ? 64'h800 : _sels_T_7[12] ? 64'h1000 : _sels_T_7[13] ? 64'h2000 : _sels_T_7[14] ? 64'h4000 : _sels_T_7[15] ? 64'h8000 : _sels_T_7[16] ? 64'h10000 : _sels_T_7[17] ? 64'h20000 : _sels_T_7[18] ? 64'h40000 : _sels_T_7[19] ? 64'h80000 : _sels_T_7[20] ? 64'h100000 : _sels_T_7[21] ? 64'h200000 : _sels_T_7[22] ? 64'h400000 : _sels_T_7[23] ? 64'h800000 : _sels_T_7[24] ? 64'h1000000 : _sels_T_7[25] ? 64'h2000000 : _sels_T_7[26] ? 64'h4000000 : _sels_T_7[27] ? 64'h8000000 : _sels_T_7[28] ? 64'h10000000 : _sels_T_7[29] ? 64'h20000000 : _sels_T_7[30] ? 64'h40000000 : _sels_T_7[31] ? 64'h80000000 : _sels_T_7[32] ? 64'h100000000 : _sels_T_7[33] ? 64'h200000000 : _sels_T_7[34] ? 64'h400000000 : _sels_T_7[35] ? 64'h800000000 : _sels_T_7[36] ? 64'h1000000000 : _sels_T_7[37] ? 64'h2000000000 : _sels_T_7[38] ? 64'h4000000000 : _sels_T_7[39] ? 64'h8000000000 : _sels_T_7[40] ? 64'h10000000000 : _sels_T_7[41] ? 64'h20000000000 : _sels_T_7[42] ? 64'h40000000000 : _sels_T_7[43] ? 64'h80000000000 : _sels_T_7[44] ? 64'h100000000000 : _sels_T_7[45] ? 64'h200000000000 : _sels_T_7[46] ? 64'h400000000000 : _sels_T_7[47] ? 64'h800000000000 : _sels_T_7[48] ? 64'h1000000000000 : _sels_T_7[49] ? 64'h2000000000000 : _sels_T_7[50] ? 64'h4000000000000 : _sels_T_7[51] ? 64'h8000000000000 : _sels_T_7[52] ? 64'h10000000000000 : _sels_T_7[53] ? 64'h20000000000000 : _sels_T_7[54] ? 64'h40000000000000 : _sels_T_7[55] ? 64'h80000000000000 : _sels_T_7[56] ? 64'h100000000000000 : _sels_T_7[57] ? 64'h200000000000000 : _sels_T_7[58] ? 64'h400000000000000 : _sels_T_7[59] ? 64'h800000000000000 : _sels_T_7[60] ? 64'h1000000000000000 : _sels_T_7[61] ? 64'h2000000000000000 : _sels_T_7[62] ? 64'h4000000000000000 : {_sels_T_7[63], 63'h0};	// @[Mux.scala:47:70, OneHot.scala:84:71, rename-freelist.scala:50:45, util.scala:410:19]
  wire [63:0]       allocs_0 = 64'h1 << r_sel;	// @[OneHot.scala:57:35, Reg.scala:19:16, rename-freelist.scala:50:45]
  wire [63:0]       allocs_1 = 64'h1 << r_sel_1;	// @[OneHot.scala:57:35, Reg.scala:19:16, rename-freelist.scala:50:45]
  wire [63:0]       allocs_2 = 64'h1 << r_sel_2;	// @[OneHot.scala:57:35, Reg.scala:19:16, rename-freelist.scala:50:45]
  wire [63:0]       allocs_3 = 64'h1 << r_sel_3;	// @[OneHot.scala:57:35, Reg.scala:19:16, rename-freelist.scala:50:45]
  wire [63:0]       allocs_4 = 64'h1 << r_sel_4;	// @[OneHot.scala:57:35, Reg.scala:19:16, rename-freelist.scala:50:45]
  wire [15:0][63:0] _GEN = {{br_alloc_lists_15}, {br_alloc_lists_14}, {br_alloc_lists_13}, {br_alloc_lists_12}, {br_alloc_lists_11}, {br_alloc_lists_10}, {br_alloc_lists_9}, {br_alloc_lists_8}, {br_alloc_lists_7}, {br_alloc_lists_6}, {br_alloc_lists_5}, {br_alloc_lists_4}, {br_alloc_lists_3}, {br_alloc_lists_2}, {br_alloc_lists_1}, {br_alloc_lists_0}};	// @[rename-freelist.scala:51:27, :63:63]
  wire [63:0]       br_deallocs = _GEN[io_brupdate_b2_uop_br_tag] & {64{io_brupdate_b2_mispredict}};	// @[Bitwise.scala:77:12, rename-freelist.scala:63:63]
  wire [63:0]       dealloc_mask = 64'h1 << io_dealloc_pregs_0_bits & {64{io_dealloc_pregs_0_valid}} | 64'h1 << io_dealloc_pregs_1_bits & {64{io_dealloc_pregs_1_valid}} | 64'h1 << io_dealloc_pregs_2_bits & {64{io_dealloc_pregs_2_valid}} | 64'h1 << io_dealloc_pregs_3_bits & {64{io_dealloc_pregs_3_valid}} | 64'h1 << io_dealloc_pregs_4_bits & {64{io_dealloc_pregs_4_valid}} | br_deallocs;	// @[Bitwise.scala:77:12, OneHot.scala:57:35, rename-freelist.scala:50:45, :63:63, :64:{79,110}]
  reg               r_valid;	// @[rename-freelist.scala:81:26]
  wire              sel_fire_0 = (~r_valid | io_reqs_0) & (|sels_0);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :85:{21,30,45}]
  reg               r_valid_1;	// @[rename-freelist.scala:81:26]
  wire              sel_fire_1 = (~r_valid_1 | io_reqs_1) & (|sels_1);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :85:{21,30,45}]
  reg               r_valid_2;	// @[rename-freelist.scala:81:26]
  wire              sel_fire_2 = (~r_valid_2 | io_reqs_2) & (|sels_2);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :85:{21,30,45}]
  reg               r_valid_3;	// @[rename-freelist.scala:81:26]
  wire              sel_fire_3 = (~r_valid_3 | io_reqs_3) & (|sels_3);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :85:{21,30,45}]
  reg               r_valid_4;	// @[rename-freelist.scala:81:26]
  wire              sel_fire_4 = (~r_valid_4 | io_reqs_4) & (|sels_4);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :85:{21,30,45}]
  wire [30:0]       _GEN_0 = sels_0[63:33] | sels_0[31:1];	// @[Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:28]
  wire [14:0]       _GEN_1 = _GEN_0[30:16] | _GEN_0[14:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [6:0]        _GEN_2 = _GEN_1[14:8] | _GEN_1[6:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [2:0]        _GEN_3 = _GEN_2[6:4] | _GEN_2[2:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [30:0]       _GEN_4 = sels_1[63:33] | sels_1[31:1];	// @[Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:28]
  wire [14:0]       _GEN_5 = _GEN_4[30:16] | _GEN_4[14:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [6:0]        _GEN_6 = _GEN_5[14:8] | _GEN_5[6:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [2:0]        _GEN_7 = _GEN_6[6:4] | _GEN_6[2:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [30:0]       _GEN_8 = sels_2[63:33] | sels_2[31:1];	// @[Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:28]
  wire [14:0]       _GEN_9 = _GEN_8[30:16] | _GEN_8[14:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [6:0]        _GEN_10 = _GEN_9[14:8] | _GEN_9[6:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [2:0]        _GEN_11 = _GEN_10[6:4] | _GEN_10[2:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [30:0]       _GEN_12 = sels_3[63:33] | sels_3[31:1];	// @[Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:28]
  wire [14:0]       _GEN_13 = _GEN_12[30:16] | _GEN_12[14:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [6:0]        _GEN_14 = _GEN_13[14:8] | _GEN_13[6:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [2:0]        _GEN_15 = _GEN_14[6:4] | _GEN_14[2:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [30:0]       _GEN_16 = sels_4[63:33] | sels_4[31:1];	// @[Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:28]
  wire [14:0]       _GEN_17 = _GEN_16[30:16] | _GEN_16[14:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [6:0]        _GEN_18 = _GEN_17[14:8] | _GEN_17[6:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [2:0]        _GEN_19 = _GEN_18[6:4] | _GEN_18[2:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [63:0]       alloc_masks_4 = allocs_4 & {64{io_reqs_4}};	// @[Bitwise.scala:77:12, OneHot.scala:57:35, rename-freelist.scala:59:88]
  wire [63:0]       alloc_masks_3 = alloc_masks_4 | allocs_3 & {64{io_reqs_3}};	// @[Bitwise.scala:77:12, OneHot.scala:57:35, rename-freelist.scala:59:{84,88}]
  wire [63:0]       alloc_masks_2 = alloc_masks_3 | allocs_2 & {64{io_reqs_2}};	// @[Bitwise.scala:77:12, OneHot.scala:57:35, rename-freelist.scala:59:{84,88}]
  wire [63:0]       alloc_masks_1 = alloc_masks_2 | allocs_1 & {64{io_reqs_1}};	// @[Bitwise.scala:77:12, OneHot.scala:57:35, rename-freelist.scala:59:{84,88}]
  wire [63:0]       alloc_masks_0 = alloc_masks_1 | allocs_0 & {64{io_reqs_0}};	// @[Bitwise.scala:77:12, OneHot.scala:57:35, rename-freelist.scala:59:{84,88}]
  wire [4:0]        br_slots = {io_ren_br_tags_4_valid, io_ren_br_tags_3_valid, io_ren_br_tags_2_valid, io_ren_br_tags_1_valid, io_ren_br_tags_0_valid};	// @[rename-freelist.scala:66:64]
  wire [4:0]        list_req = {io_ren_br_tags_4_bits == 4'h0, io_ren_br_tags_3_bits == 4'h0, io_ren_br_tags_2_bits == 4'h0, io_ren_br_tags_1_bits == 4'h0, io_ren_br_tags_0_bits == 4'h0} & br_slots;	// @[OneHot.scala:32:14, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_1 = {io_ren_br_tags_4_bits == 4'h1, io_ren_br_tags_3_bits == 4'h1, io_ren_br_tags_2_bits == 4'h1, io_ren_br_tags_1_bits == 4'h1, io_ren_br_tags_0_bits == 4'h1} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_2 = {io_ren_br_tags_4_bits == 4'h2, io_ren_br_tags_3_bits == 4'h2, io_ren_br_tags_2_bits == 4'h2, io_ren_br_tags_1_bits == 4'h2, io_ren_br_tags_0_bits == 4'h2} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_3 = {io_ren_br_tags_4_bits == 4'h3, io_ren_br_tags_3_bits == 4'h3, io_ren_br_tags_2_bits == 4'h3, io_ren_br_tags_1_bits == 4'h3, io_ren_br_tags_0_bits == 4'h3} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_4 = {io_ren_br_tags_4_bits == 4'h4, io_ren_br_tags_3_bits == 4'h4, io_ren_br_tags_2_bits == 4'h4, io_ren_br_tags_1_bits == 4'h4, io_ren_br_tags_0_bits == 4'h4} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_5 = {io_ren_br_tags_4_bits == 4'h5, io_ren_br_tags_3_bits == 4'h5, io_ren_br_tags_2_bits == 4'h5, io_ren_br_tags_1_bits == 4'h5, io_ren_br_tags_0_bits == 4'h5} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_6 = {io_ren_br_tags_4_bits == 4'h6, io_ren_br_tags_3_bits == 4'h6, io_ren_br_tags_2_bits == 4'h6, io_ren_br_tags_1_bits == 4'h6, io_ren_br_tags_0_bits == 4'h6} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_7 = {io_ren_br_tags_4_bits == 4'h7, io_ren_br_tags_3_bits == 4'h7, io_ren_br_tags_2_bits == 4'h7, io_ren_br_tags_1_bits == 4'h7, io_ren_br_tags_0_bits == 4'h7} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_8 = {io_ren_br_tags_4_bits == 4'h8, io_ren_br_tags_3_bits == 4'h8, io_ren_br_tags_2_bits == 4'h8, io_ren_br_tags_1_bits == 4'h8, io_ren_br_tags_0_bits == 4'h8} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_9 = {io_ren_br_tags_4_bits == 4'h9, io_ren_br_tags_3_bits == 4'h9, io_ren_br_tags_2_bits == 4'h9, io_ren_br_tags_1_bits == 4'h9, io_ren_br_tags_0_bits == 4'h9} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_10 = {io_ren_br_tags_4_bits == 4'hA, io_ren_br_tags_3_bits == 4'hA, io_ren_br_tags_2_bits == 4'hA, io_ren_br_tags_1_bits == 4'hA, io_ren_br_tags_0_bits == 4'hA} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_11 = {io_ren_br_tags_4_bits == 4'hB, io_ren_br_tags_3_bits == 4'hB, io_ren_br_tags_2_bits == 4'hB, io_ren_br_tags_1_bits == 4'hB, io_ren_br_tags_0_bits == 4'hB} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_12 = {io_ren_br_tags_4_bits == 4'hC, io_ren_br_tags_3_bits == 4'hC, io_ren_br_tags_2_bits == 4'hC, io_ren_br_tags_1_bits == 4'hC, io_ren_br_tags_0_bits == 4'hC} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_13 = {io_ren_br_tags_4_bits == 4'hD, io_ren_br_tags_3_bits == 4'hD, io_ren_br_tags_2_bits == 4'hD, io_ren_br_tags_1_bits == 4'hD, io_ren_br_tags_0_bits == 4'hD} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_14 = {io_ren_br_tags_4_bits == 4'hE, io_ren_br_tags_3_bits == 4'hE, io_ren_br_tags_2_bits == 4'hE, io_ren_br_tags_1_bits == 4'hE, io_ren_br_tags_0_bits == 4'hE} & br_slots;	// @[OneHot.scala:57:35, rename-freelist.scala:66:64, :69:{72,78,85}]
  wire [4:0]        list_req_15 = {&io_ren_br_tags_4_bits, &io_ren_br_tags_3_bits, &io_ren_br_tags_2_bits, &io_ren_br_tags_1_bits, &io_ren_br_tags_0_bits} & br_slots;	// @[rename-freelist.scala:66:64, :69:{72,78,85}]
  always @(posedge clock) begin
    if (reset) begin
      free_list <= 64'hFFFFFFFFFFFFFFFE;	// @[rename-freelist.scala:50:{26,45}]
      r_valid <= 1'h0;	// @[rename-freelist.scala:51:27, :81:26]
      r_valid_1 <= 1'h0;	// @[rename-freelist.scala:51:27, :81:26]
      r_valid_2 <= 1'h0;	// @[rename-freelist.scala:51:27, :81:26]
      r_valid_3 <= 1'h0;	// @[rename-freelist.scala:51:27, :81:26]
      r_valid_4 <= 1'h0;	// @[rename-freelist.scala:51:27, :81:26]
    end
    else begin
      free_list <= (free_list & ~(sels_0 & {64{sel_fire_0}} | sels_1 & {64{sel_fire_1}} | sels_2 & {64{sel_fire_2}} | sels_3 & {64{sel_fire_3}} | sels_4 & {64{sel_fire_4}}) | dealloc_mask) & 64'hFFFFFFFFFFFFFFFE;	// @[Bitwise.scala:77:12, Mux.scala:47:70, rename-freelist.scala:50:{26,45}, :62:{60,82}, :64:110, :76:{27,29,39,55}, :85:45]
      r_valid <= r_valid & ~io_reqs_0 | (|sels_0);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :84:{24,27,39}]
      r_valid_1 <= r_valid_1 & ~io_reqs_1 | (|sels_1);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :84:{24,27,39}]
      r_valid_2 <= r_valid_2 & ~io_reqs_2 | (|sels_2);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :84:{24,27,39}]
      r_valid_3 <= r_valid_3 & ~io_reqs_3 | (|sels_3);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :84:{24,27,39}]
      r_valid_4 <= r_valid_4 & ~io_reqs_4 | (|sels_4);	// @[Mux.scala:47:70, rename-freelist.scala:80:27, :81:26, :84:{24,27,39}]
    end
    if (|list_req)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_0 <= (list_req[0] ? alloc_masks_1 : 64'h0) | (list_req[1] ? alloc_masks_2 : 64'h0) | (list_req[2] ? alloc_masks_3 : 64'h0) | (list_req[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_0 <= br_alloc_lists_0 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_1)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_1 <= (list_req_1[0] ? alloc_masks_1 : 64'h0) | (list_req_1[1] ? alloc_masks_2 : 64'h0) | (list_req_1[2] ? alloc_masks_3 : 64'h0) | (list_req_1[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_1 <= br_alloc_lists_1 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_2)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_2 <= (list_req_2[0] ? alloc_masks_1 : 64'h0) | (list_req_2[1] ? alloc_masks_2 : 64'h0) | (list_req_2[2] ? alloc_masks_3 : 64'h0) | (list_req_2[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_2 <= br_alloc_lists_2 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_3)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_3 <= (list_req_3[0] ? alloc_masks_1 : 64'h0) | (list_req_3[1] ? alloc_masks_2 : 64'h0) | (list_req_3[2] ? alloc_masks_3 : 64'h0) | (list_req_3[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_3 <= br_alloc_lists_3 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_4)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_4 <= (list_req_4[0] ? alloc_masks_1 : 64'h0) | (list_req_4[1] ? alloc_masks_2 : 64'h0) | (list_req_4[2] ? alloc_masks_3 : 64'h0) | (list_req_4[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_4 <= br_alloc_lists_4 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_5)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_5 <= (list_req_5[0] ? alloc_masks_1 : 64'h0) | (list_req_5[1] ? alloc_masks_2 : 64'h0) | (list_req_5[2] ? alloc_masks_3 : 64'h0) | (list_req_5[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_5 <= br_alloc_lists_5 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_6)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_6 <= (list_req_6[0] ? alloc_masks_1 : 64'h0) | (list_req_6[1] ? alloc_masks_2 : 64'h0) | (list_req_6[2] ? alloc_masks_3 : 64'h0) | (list_req_6[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_6 <= br_alloc_lists_6 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_7)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_7 <= (list_req_7[0] ? alloc_masks_1 : 64'h0) | (list_req_7[1] ? alloc_masks_2 : 64'h0) | (list_req_7[2] ? alloc_masks_3 : 64'h0) | (list_req_7[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_7 <= br_alloc_lists_7 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_8)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_8 <= (list_req_8[0] ? alloc_masks_1 : 64'h0) | (list_req_8[1] ? alloc_masks_2 : 64'h0) | (list_req_8[2] ? alloc_masks_3 : 64'h0) | (list_req_8[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_8 <= br_alloc_lists_8 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_9)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_9 <= (list_req_9[0] ? alloc_masks_1 : 64'h0) | (list_req_9[1] ? alloc_masks_2 : 64'h0) | (list_req_9[2] ? alloc_masks_3 : 64'h0) | (list_req_9[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_9 <= br_alloc_lists_9 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_10)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_10 <= (list_req_10[0] ? alloc_masks_1 : 64'h0) | (list_req_10[1] ? alloc_masks_2 : 64'h0) | (list_req_10[2] ? alloc_masks_3 : 64'h0) | (list_req_10[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_10 <= br_alloc_lists_10 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_11)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_11 <= (list_req_11[0] ? alloc_masks_1 : 64'h0) | (list_req_11[1] ? alloc_masks_2 : 64'h0) | (list_req_11[2] ? alloc_masks_3 : 64'h0) | (list_req_11[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_11 <= br_alloc_lists_11 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_12)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_12 <= (list_req_12[0] ? alloc_masks_1 : 64'h0) | (list_req_12[1] ? alloc_masks_2 : 64'h0) | (list_req_12[2] ? alloc_masks_3 : 64'h0) | (list_req_12[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_12 <= br_alloc_lists_12 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_13)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_13 <= (list_req_13[0] ? alloc_masks_1 : 64'h0) | (list_req_13[1] ? alloc_masks_2 : 64'h0) | (list_req_13[2] ? alloc_masks_3 : 64'h0) | (list_req_13[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_13 <= br_alloc_lists_13 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_14)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_14 <= (list_req_14[0] ? alloc_masks_1 : 64'h0) | (list_req_14[1] ? alloc_masks_2 : 64'h0) | (list_req_14[2] ? alloc_masks_3 : 64'h0) | (list_req_14[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_14 <= br_alloc_lists_14 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (|list_req_15)	// @[rename-freelist.scala:69:85, :70:29]
      br_alloc_lists_15 <= (list_req_15[0] ? alloc_masks_1 : 64'h0) | (list_req_15[1] ? alloc_masks_2 : 64'h0) | (list_req_15[2] ? alloc_masks_3 : 64'h0) | (list_req_15[3] ? alloc_masks_4 : 64'h0);	// @[Mux.scala:27:73, :29:36, :47:70, rename-freelist.scala:51:27, :59:{84,88}, :69:85]
    else	// @[rename-freelist.scala:70:29]
      br_alloc_lists_15 <= br_alloc_lists_15 & ~br_deallocs | alloc_masks_0;	// @[rename-freelist.scala:51:27, :59:84, :63:63, :72:{58,60,73}]
    if (sel_fire_0)	// @[rename-freelist.scala:85:45]
      r_sel <= {|(sels_0[63:32]), |(_GEN_0[30:15]), |(_GEN_1[14:7]), |(_GEN_2[6:3]), |(_GEN_3[2:1]), _GEN_3[2] | _GEN_3[0]};	// @[Cat.scala:33:92, Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:{14,28}, Reg.scala:19:16]
    if (sel_fire_1)	// @[rename-freelist.scala:85:45]
      r_sel_1 <= {|(sels_1[63:32]), |(_GEN_4[30:15]), |(_GEN_5[14:7]), |(_GEN_6[6:3]), |(_GEN_7[2:1]), _GEN_7[2] | _GEN_7[0]};	// @[Cat.scala:33:92, Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:{14,28}, Reg.scala:19:16]
    if (sel_fire_2)	// @[rename-freelist.scala:85:45]
      r_sel_2 <= {|(sels_2[63:32]), |(_GEN_8[30:15]), |(_GEN_9[14:7]), |(_GEN_10[6:3]), |(_GEN_11[2:1]), _GEN_11[2] | _GEN_11[0]};	// @[Cat.scala:33:92, Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:{14,28}, Reg.scala:19:16]
    if (sel_fire_3)	// @[rename-freelist.scala:85:45]
      r_sel_3 <= {|(sels_3[63:32]), |(_GEN_12[30:15]), |(_GEN_13[14:7]), |(_GEN_14[6:3]), |(_GEN_15[2:1]), _GEN_15[2] | _GEN_15[0]};	// @[Cat.scala:33:92, Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:{14,28}, Reg.scala:19:16]
    if (sel_fire_4)	// @[rename-freelist.scala:85:45]
      r_sel_4 <= {|(sels_4[63:32]), |(_GEN_16[30:15]), |(_GEN_17[14:7]), |(_GEN_18[6:3]), |(_GEN_19[2:1]), _GEN_19[2] | _GEN_19[0]};	// @[Cat.scala:33:92, Mux.scala:47:70, OneHot.scala:30:18, :31:18, :32:{14,28}, Reg.scala:19:16]
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire  [63:0] _io_debug_freelist_T_24 = free_list | allocs_0 & {64{r_valid}} | allocs_1 & {64{r_valid_1}} | allocs_2 & {64{r_valid_2}} | allocs_3 & {64{r_valid_3}} | allocs_4 & {64{r_valid_4}};	// @[Bitwise.scala:77:12, OneHot.scala:57:35, rename-freelist.scala:50:26, :81:26, :91:{34,77}]
    always @(posedge clock) begin	// @[rename-freelist.scala:94:10]
      if (~reset & (|(_io_debug_freelist_T_24 & dealloc_mask))) begin	// @[rename-freelist.scala:64:110, :91:34, :94:{10,31,47}]
        if (`ASSERT_VERBOSE_COND_)	// @[rename-freelist.scala:94:10]
          $error("Assertion failed: [freelist] Returning a free physical register.\n    at rename-freelist.scala:94 assert (!(io.debug.freelist & dealloc_mask).orR, \"[freelist] Returning a free physical register.\")\n");	// @[rename-freelist.scala:94:10]
        if (`STOP_COND_)	// @[rename-freelist.scala:94:10]
          $fatal;	// @[rename-freelist.scala:94:10]
      end
      if (~reset
          & ~(~io_debug_pipeline_empty | {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[0]} + {1'h0, _io_debug_freelist_T_24[1]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[2]} + {1'h0, _io_debug_freelist_T_24[3]}}} + {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[4]} + {1'h0, _io_debug_freelist_T_24[5]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[6]} + {1'h0, _io_debug_freelist_T_24[7]}}}} + {1'h0, {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[8]} + {1'h0, _io_debug_freelist_T_24[9]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[10]} + {1'h0, _io_debug_freelist_T_24[11]}}} + {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[12]} + {1'h0, _io_debug_freelist_T_24[13]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[14]} + {1'h0, _io_debug_freelist_T_24[15]}}}}} + {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[16]} + {1'h0, _io_debug_freelist_T_24[17]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[18]} + {1'h0, _io_debug_freelist_T_24[19]}}} + {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[20]} + {1'h0, _io_debug_freelist_T_24[21]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[22]} + {1'h0, _io_debug_freelist_T_24[23]}}}} + {1'h0, {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[24]} + {1'h0, _io_debug_freelist_T_24[25]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[26]} + {1'h0, _io_debug_freelist_T_24[27]}}} + {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[28]} + {1'h0, _io_debug_freelist_T_24[29]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[30]} + {1'h0, _io_debug_freelist_T_24[31]}}}}}}
              + {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[32]} + {1'h0, _io_debug_freelist_T_24[33]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[34]} + {1'h0, _io_debug_freelist_T_24[35]}}} + {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[36]} + {1'h0, _io_debug_freelist_T_24[37]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[38]} + {1'h0, _io_debug_freelist_T_24[39]}}}} + {1'h0, {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[40]} + {1'h0, _io_debug_freelist_T_24[41]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[42]} + {1'h0, _io_debug_freelist_T_24[43]}}} + {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[44]} + {1'h0, _io_debug_freelist_T_24[45]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[46]} + {1'h0, _io_debug_freelist_T_24[47]}}}}} + {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[48]} + {1'h0, _io_debug_freelist_T_24[49]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[50]} + {1'h0, _io_debug_freelist_T_24[51]}}} + {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[52]} + {1'h0, _io_debug_freelist_T_24[53]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[54]} + {1'h0, _io_debug_freelist_T_24[55]}}}} + {1'h0, {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[56]} + {1'h0, _io_debug_freelist_T_24[57]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[58]} + {1'h0, _io_debug_freelist_T_24[59]}}} + {1'h0, {1'h0, {1'h0, _io_debug_freelist_T_24[60]} + {1'h0, _io_debug_freelist_T_24[61]}} + {1'h0, {1'h0, _io_debug_freelist_T_24[62]} + {1'h0, _io_debug_freelist_T_24[63]}}}}}} > 7'h1E)) begin	// @[Bitwise.scala:51:90, :53:100, rename-freelist.scala:51:27, :91:34, :95:{10,11,36,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[rename-freelist.scala:95:10]
          $error("Assertion failed: [freelist] Leaking physical registers.\n    at rename-freelist.scala:95 assert (!io.debug.pipeline_empty || PopCount(io.debug.freelist) >= (numPregs - numLregs - 1).U,\n");	// @[rename-freelist.scala:95:10]
        if (`STOP_COND_)	// @[rename-freelist.scala:95:10]
          $fatal;	// @[rename-freelist.scala:95:10]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    logic [31:0] _RANDOM_26;
    logic [31:0] _RANDOM_27;
    logic [31:0] _RANDOM_28;
    logic [31:0] _RANDOM_29;
    logic [31:0] _RANDOM_30;
    logic [31:0] _RANDOM_31;
    logic [31:0] _RANDOM_32;
    logic [31:0] _RANDOM_33;
    logic [31:0] _RANDOM_34;
    logic [31:0] _RANDOM_35;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        free_list = {_RANDOM_0, _RANDOM_1};	// @[rename-freelist.scala:50:26]
        br_alloc_lists_0 = {_RANDOM_2, _RANDOM_3};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_1 = {_RANDOM_4, _RANDOM_5};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_2 = {_RANDOM_6, _RANDOM_7};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_3 = {_RANDOM_8, _RANDOM_9};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_4 = {_RANDOM_10, _RANDOM_11};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_5 = {_RANDOM_12, _RANDOM_13};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_6 = {_RANDOM_14, _RANDOM_15};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_7 = {_RANDOM_16, _RANDOM_17};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_8 = {_RANDOM_18, _RANDOM_19};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_9 = {_RANDOM_20, _RANDOM_21};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_10 = {_RANDOM_22, _RANDOM_23};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_11 = {_RANDOM_24, _RANDOM_25};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_12 = {_RANDOM_26, _RANDOM_27};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_13 = {_RANDOM_28, _RANDOM_29};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_14 = {_RANDOM_30, _RANDOM_31};	// @[rename-freelist.scala:51:27]
        br_alloc_lists_15 = {_RANDOM_32, _RANDOM_33};	// @[rename-freelist.scala:51:27]
        r_valid = _RANDOM_34[0];	// @[rename-freelist.scala:81:26]
        r_sel = _RANDOM_34[6:1];	// @[Reg.scala:19:16, rename-freelist.scala:81:26]
        r_valid_1 = _RANDOM_34[7];	// @[rename-freelist.scala:81:26]
        r_sel_1 = _RANDOM_34[13:8];	// @[Reg.scala:19:16, rename-freelist.scala:81:26]
        r_valid_2 = _RANDOM_34[14];	// @[rename-freelist.scala:81:26]
        r_sel_2 = _RANDOM_34[20:15];	// @[Reg.scala:19:16, rename-freelist.scala:81:26]
        r_valid_3 = _RANDOM_34[21];	// @[rename-freelist.scala:81:26]
        r_sel_3 = _RANDOM_34[27:22];	// @[Reg.scala:19:16, rename-freelist.scala:81:26]
        r_valid_4 = _RANDOM_34[28];	// @[rename-freelist.scala:81:26]
        r_sel_4 = {_RANDOM_34[31:29], _RANDOM_35[2:0]};	// @[Reg.scala:19:16, rename-freelist.scala:81:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_alloc_pregs_0_valid = r_valid;	// @[rename-freelist.scala:81:26]
  assign io_alloc_pregs_0_bits = r_sel;	// @[Reg.scala:19:16]
  assign io_alloc_pregs_1_valid = r_valid_1;	// @[rename-freelist.scala:81:26]
  assign io_alloc_pregs_1_bits = r_sel_1;	// @[Reg.scala:19:16]
  assign io_alloc_pregs_2_valid = r_valid_2;	// @[rename-freelist.scala:81:26]
  assign io_alloc_pregs_2_bits = r_sel_2;	// @[Reg.scala:19:16]
  assign io_alloc_pregs_3_valid = r_valid_3;	// @[rename-freelist.scala:81:26]
  assign io_alloc_pregs_3_bits = r_sel_3;	// @[Reg.scala:19:16]
  assign io_alloc_pregs_4_valid = r_valid_4;	// @[rename-freelist.scala:81:26]
  assign io_alloc_pregs_4_bits = r_sel_4;	// @[Reg.scala:19:16]
endmodule

