// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TLMonitor(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input        io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [15:0] io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [1:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt
);

  wire [31:0] _plusarg_reader_1_out;	// @[PlusArg.scala:80:11]
  wire [31:0] _plusarg_reader_out;	// @[PlusArg.scala:80:11]
  wire [26:0] _GEN = {23'h0, io_in_a_bits_size};	// @[package.scala:235:71]
  wire        _T_1213 = io_in_a_ready & io_in_a_valid;	// @[Decoupled.scala:51:35]
  reg  [7:0]  a_first_counter;	// @[Edges.scala:228:27]
  reg  [2:0]  opcode;	// @[Monitor.scala:384:22]
  reg  [2:0]  param;	// @[Monitor.scala:385:22]
  reg  [3:0]  size;	// @[Monitor.scala:386:22]
  reg         source;	// @[Monitor.scala:387:22]
  reg  [31:0] address;	// @[Monitor.scala:388:22]
  reg  [7:0]  d_first_counter;	// @[Edges.scala:228:27]
  reg  [2:0]  opcode_1;	// @[Monitor.scala:535:22]
  reg  [1:0]  param_1;	// @[Monitor.scala:536:22]
  reg  [3:0]  size_1;	// @[Monitor.scala:537:22]
  reg         source_1;	// @[Monitor.scala:538:22]
  reg  [1:0]  sink;	// @[Monitor.scala:539:22]
  reg         denied;	// @[Monitor.scala:540:22]
  reg         inflight;	// @[Monitor.scala:611:27]
  reg  [3:0]  inflight_opcodes;	// @[Monitor.scala:613:35]
  reg  [7:0]  inflight_sizes;	// @[Monitor.scala:615:33]
  reg  [7:0]  a_first_counter_1;	// @[Edges.scala:228:27]
  wire        a_first_1 = a_first_counter_1 == 8'h0;	// @[Edges.scala:228:27, :230:25, Monitor.scala:745:35]
  reg  [7:0]  d_first_counter_1;	// @[Edges.scala:228:27]
  wire        d_first_1 = d_first_counter_1 == 8'h0;	// @[Edges.scala:228:27, :230:25, Monitor.scala:745:35]
  wire        _T_1137 = _T_1213 & a_first_1;	// @[Decoupled.scala:51:35, Edges.scala:230:25, Monitor.scala:652:27]
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;	// @[Monitor.scala:81:25, :670:46]
  reg  [31:0] watchdog;	// @[Monitor.scala:706:27]
  reg  [7:0]  d_first_counter_2;	// @[Edges.scala:228:27]
  wire        d_first_2 = d_first_counter_2 == 8'h0;	// @[Edges.scala:228:27, :230:25, Monitor.scala:745:35]
  wire [26:0] _a_first_beats1_decode_T_1 = 27'hFFF << _GEN;	// @[package.scala:235:71]
  wire [26:0] _a_first_beats1_decode_T_5 = 27'hFFF << _GEN;	// @[package.scala:235:71]
  wire [26:0] _GEN_0 = {23'h0, io_in_d_bits_size};	// @[package.scala:235:71]
  wire [26:0] _d_first_beats1_decode_T_1 = 27'hFFF << _GEN_0;	// @[package.scala:235:71]
  wire [26:0] _d_first_beats1_decode_T_5 = 27'hFFF << _GEN_0;	// @[package.scala:235:71]
  wire [26:0] _d_first_beats1_decode_T_9 = 27'hFFF << _GEN_0;	// @[package.scala:235:71]
  wire [18:0] _a_opcodes_set_T_1 = {15'h0, _T_1137 ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << {16'h0, io_in_a_bits_source, 2'h0};	// @[Monitor.scala:42:11, :88:31, :638:65, :643:40, :652:{27,72}, :654:{28,53}, :656:54, OneHot.scala:64:12, Parameters.scala:92:42, package.scala:235:71]
  wire [19:0] _a_sizes_set_T_1 = {15'h0, _T_1137 ? {io_in_a_bits_size, 1'h1} : 5'h0} << {16'h0, io_in_a_bits_source, 3'h0};	// @[Bundles.scala:259:74, Monitor.scala:42:11, :88:31, :645:38, :652:{27,72}, :655:{28,51}, :657:52, package.scala:235:71]
  wire        _T_1286 = io_in_d_ready & io_in_d_valid;	// @[Decoupled.scala:51:35]
  wire        _T_1132 = _T_1286 & ~(|d_first_counter);	// @[Decoupled.scala:51:35, Edges.scala:228:27, :230:25, Monitor.scala:549:20]
  wire        d_clr = _T_1286 & d_first_1 & ~d_release_ack;	// @[Decoupled.scala:51:35, Edges.scala:230:25, Monitor.scala:670:46, :671:74, :675:72]
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
      d_first_counter <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
      inflight <= 1'h0;	// @[Monitor.scala:611:27]
      inflight_opcodes <= 4'h0;	// @[Monitor.scala:613:35, :638:65, Parameters.scala:92:42]
      inflight_sizes <= 8'h0;	// @[Monitor.scala:615:33, :745:35]
      a_first_counter_1 <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
      d_first_counter_1 <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
      watchdog <= 32'h0;	// @[Bundles.scala:259:74, Monitor.scala:706:27]
      d_first_counter_2 <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
    end
    else begin
      if (_T_1213) begin	// @[Decoupled.scala:51:35]
        if (|a_first_counter)	// @[Edges.scala:228:27, :230:25]
          a_first_counter <= a_first_counter - 8'h1;	// @[Edges.scala:228:27, :229:28]
        else if (io_in_a_bits_opcode[2])	// @[Edges.scala:91:37]
          a_first_counter <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
        else	// @[Edges.scala:91:37]
          a_first_counter <= ~(_a_first_beats1_decode_T_1[11:4]);	// @[Edges.scala:228:27, package.scala:235:{46,71,76}]
        if (a_first_1) begin	// @[Edges.scala:230:25]
          if (io_in_a_bits_opcode[2])	// @[Edges.scala:91:37]
            a_first_counter_1 <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
          else	// @[Edges.scala:91:37]
            a_first_counter_1 <= ~(_a_first_beats1_decode_T_5[11:4]);	// @[Edges.scala:228:27, package.scala:235:{46,71,76}]
        end
        else	// @[Edges.scala:230:25]
          a_first_counter_1 <= a_first_counter_1 - 8'h1;	// @[Edges.scala:228:27, :229:28]
      end
      if (_T_1286) begin	// @[Decoupled.scala:51:35]
        if (|d_first_counter)	// @[Edges.scala:228:27, :230:25]
          d_first_counter <= d_first_counter - 8'h1;	// @[Edges.scala:228:27, :229:28]
        else if (io_in_d_bits_opcode[0])	// @[Edges.scala:105:36]
          d_first_counter <= ~(_d_first_beats1_decode_T_1[11:4]);	// @[Edges.scala:228:27, package.scala:235:{46,71,76}]
        else	// @[Edges.scala:105:36]
          d_first_counter <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
        if (d_first_1) begin	// @[Edges.scala:230:25]
          if (io_in_d_bits_opcode[0])	// @[Edges.scala:105:36]
            d_first_counter_1 <= ~(_d_first_beats1_decode_T_5[11:4]);	// @[Edges.scala:228:27, package.scala:235:{46,71,76}]
          else	// @[Edges.scala:105:36]
            d_first_counter_1 <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
        end
        else	// @[Edges.scala:230:25]
          d_first_counter_1 <= d_first_counter_1 - 8'h1;	// @[Edges.scala:228:27, :229:28]
        if (d_first_2) begin	// @[Edges.scala:230:25]
          if (io_in_d_bits_opcode[0])	// @[Edges.scala:105:36]
            d_first_counter_2 <= ~(_d_first_beats1_decode_T_9[11:4]);	// @[Edges.scala:228:27, package.scala:235:{46,71,76}]
          else	// @[Edges.scala:105:36]
            d_first_counter_2 <= 8'h0;	// @[Edges.scala:228:27, Monitor.scala:745:35]
        end
        else	// @[Edges.scala:230:25]
          d_first_counter_2 <= d_first_counter_2 - 8'h1;	// @[Edges.scala:228:27, :229:28]
      end
      inflight <= (inflight | _T_1137 & ~io_in_a_bits_source) & ~d_clr;	// @[Monitor.scala:611:27, :623:34, :649:22, :652:{27,72}, :653:28, :675:72, :702:{27,36,38}]
      inflight_opcodes <= (inflight_opcodes | (_T_1137 ? _a_opcodes_set_T_1[3:0] : 4'h0)) & ~{4{d_clr}};	// @[Monitor.scala:613:35, :627:33, :638:65, :652:{27,72}, :656:{28,54}, :665:33, :675:{72,91}, :677:21, :703:{43,60,62}, Parameters.scala:92:42]
      inflight_sizes <= (inflight_sizes | (_T_1137 ? _a_sizes_set_T_1[7:0] : 8'h0)) & ~{8{d_clr}};	// @[Monitor.scala:615:33, :629:31, :652:{27,72}, :657:{28,52}, :667:31, :675:{72,91}, :678:21, :704:{39,54,56}, :745:35]
      if (_T_1213 | _T_1286)	// @[Decoupled.scala:51:35, Monitor.scala:712:27]
        watchdog <= 32'h0;	// @[Bundles.scala:259:74, Monitor.scala:706:27]
      else	// @[Monitor.scala:712:27]
        watchdog <= watchdog + 32'h1;	// @[Monitor.scala:706:27, :711:26]
    end
    if (_T_1213 & ~(|a_first_counter)) begin	// @[Decoupled.scala:51:35, Edges.scala:228:27, :230:25, Monitor.scala:396:20]
      opcode <= io_in_a_bits_opcode;	// @[Monitor.scala:384:22]
      param <= io_in_a_bits_param;	// @[Monitor.scala:385:22]
      size <= io_in_a_bits_size;	// @[Monitor.scala:386:22]
      source <= io_in_a_bits_source;	// @[Monitor.scala:387:22]
      address <= io_in_a_bits_address;	// @[Monitor.scala:388:22]
    end
    if (_T_1132) begin	// @[Monitor.scala:549:20]
      opcode_1 <= io_in_d_bits_opcode;	// @[Monitor.scala:535:22]
      param_1 <= io_in_d_bits_param;	// @[Monitor.scala:536:22]
      size_1 <= io_in_d_bits_size;	// @[Monitor.scala:537:22]
      sink <= io_in_d_bits_sink;	// @[Monitor.scala:539:22]
      denied <= io_in_d_bits_denied;	// @[Monitor.scala:540:22]
    end
    source_1 <= ~_T_1132 & source_1;	// @[Monitor.scala:538:22, :549:{20,32}, :553:15]
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire  [7:0][2:0] _GEN_1 = '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};	// @[Monitor.scala:686:39]
    wire  [7:0][2:0] _GEN_2 = '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};	// @[Monitor.scala:685:38]
    wire  [26:0]     _is_aligned_mask_T_1 = 27'hFFF << _GEN;	// @[package.scala:235:71]
    wire  [11:0]     _GEN_3 = io_in_a_bits_address[11:0] & ~(_is_aligned_mask_T_1[11:0]);	// @[Edges.scala:20:16, package.scala:235:{46,71,76}]
    wire             mask_acc = (|(io_in_a_bits_size[3:2])) | (&(io_in_a_bits_size[1:0])) & ~(io_in_a_bits_address[3]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, OneHot.scala:63:49]
    wire             mask_acc_1 = (|(io_in_a_bits_size[3:2])) | (&(io_in_a_bits_size[1:0])) & io_in_a_bits_address[3];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, OneHot.scala:63:49]
    wire             mask_size_1 = io_in_a_bits_size[1:0] == 2'h2;	// @[Bundles.scala:111:27, Misc.scala:208:26, OneHot.scala:63:49]
    wire             mask_eq_2 = ~(io_in_a_bits_address[3]) & ~(io_in_a_bits_address[2]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_3 = ~(io_in_a_bits_address[3]) & io_in_a_bits_address[2];	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_4 = io_in_a_bits_address[3] & ~(io_in_a_bits_address[2]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_5 = io_in_a_bits_address[3] & io_in_a_bits_address[2];	// @[Misc.scala:209:26, :213:27]
    wire             mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_size_2 = io_in_a_bits_size[1:0] == 2'h1;	// @[Misc.scala:208:26, OneHot.scala:57:35, :63:49]
    wire             mask_eq_6 = mask_eq_2 & ~(io_in_a_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_6 = mask_acc_2 | mask_size_2 & mask_eq_6;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_7 = mask_eq_2 & io_in_a_bits_address[1];	// @[Misc.scala:209:26, :213:27]
    wire             mask_acc_7 = mask_acc_2 | mask_size_2 & mask_eq_7;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_8 = mask_eq_3 & ~(io_in_a_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_8 = mask_acc_3 | mask_size_2 & mask_eq_8;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_9 = mask_eq_3 & io_in_a_bits_address[1];	// @[Misc.scala:209:26, :213:27]
    wire             mask_acc_9 = mask_acc_3 | mask_size_2 & mask_eq_9;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_10 = mask_eq_4 & ~(io_in_a_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_10 = mask_acc_4 | mask_size_2 & mask_eq_10;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_11 = mask_eq_4 & io_in_a_bits_address[1];	// @[Misc.scala:209:26, :213:27]
    wire             mask_acc_11 = mask_acc_4 | mask_size_2 & mask_eq_11;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_12 = mask_eq_5 & ~(io_in_a_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_12 = mask_acc_5 | mask_size_2 & mask_eq_12;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_13 = mask_eq_5 & io_in_a_bits_address[1];	// @[Misc.scala:209:26, :213:27]
    wire             mask_acc_13 = mask_acc_5 | mask_size_2 & mask_eq_13;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire  [15:0]     mask = {mask_acc_13 | mask_eq_13 & io_in_a_bits_address[0], mask_acc_13 | mask_eq_13 & ~(io_in_a_bits_address[0]), mask_acc_12 | mask_eq_12 & io_in_a_bits_address[0], mask_acc_12 | mask_eq_12 & ~(io_in_a_bits_address[0]), mask_acc_11 | mask_eq_11 & io_in_a_bits_address[0], mask_acc_11 | mask_eq_11 & ~(io_in_a_bits_address[0]), mask_acc_10 | mask_eq_10 & io_in_a_bits_address[0], mask_acc_10 | mask_eq_10 & ~(io_in_a_bits_address[0]), mask_acc_9 | mask_eq_9 & io_in_a_bits_address[0], mask_acc_9 | mask_eq_9 & ~(io_in_a_bits_address[0]), mask_acc_8 | mask_eq_8 & io_in_a_bits_address[0], mask_acc_8 | mask_eq_8 & ~(io_in_a_bits_address[0]), mask_acc_7 | mask_eq_7 & io_in_a_bits_address[0], mask_acc_7 | mask_eq_7 & ~(io_in_a_bits_address[0]), mask_acc_6 | mask_eq_6 & io_in_a_bits_address[0], mask_acc_6 | mask_eq_6 & ~(io_in_a_bits_address[0])};	// @[Cat.scala:33:92, Misc.scala:209:26, :210:20, :213:27, :214:29]
    wire             _GEN_4 = io_in_a_valid & io_in_a_bits_opcode == 3'h6;	// @[Monitor.scala:81:{25,54}]
    wire             _GEN_5 = io_in_a_bits_param > 3'h2;	// @[Bundles.scala:111:27, Monitor.scala:640:42]
    wire             _GEN_6 = io_in_a_valid & (&io_in_a_bits_opcode);	// @[Monitor.scala:92:{25,53}]
    wire             _GEN_7 = io_in_a_valid & io_in_a_bits_opcode == 3'h4;	// @[Misc.scala:205:21, Monitor.scala:104:{25,45}]
    wire             _T_372 = io_in_a_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire  [18:0]     _GEN_8 = {io_in_a_bits_address[31:15], io_in_a_bits_address[13:12]};	// @[Parameters.scala:137:45]
    wire  [18:0]     _GEN_9 = {io_in_a_bits_address[31:17] ^ 15'h8, io_in_a_bits_address[15:12]};	// @[Parameters.scala:137:{31,45}]
    wire             _GEN_10 = io_in_a_bits_mask != mask;	// @[Cat.scala:33:92, Monitor.scala:110:30]
    wire             _GEN_11 = io_in_a_valid & io_in_a_bits_opcode == 3'h0;	// @[Bundles.scala:259:74, Monitor.scala:114:{25,53}]
    wire             _T_470 = io_in_a_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             _GEN_12 = io_in_a_valid & io_in_a_bits_opcode == 3'h1;	// @[Monitor.scala:122:{25,56}, :640:42]
    wire             _T_567 = io_in_a_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             _GEN_13 = io_in_a_valid & io_in_a_bits_opcode == 3'h2;	// @[Monitor.scala:130:{25,56}, :640:42]
    wire             _GEN_14 = io_in_a_valid & io_in_a_bits_opcode == 3'h3;	// @[Bundles.scala:148:30, Monitor.scala:138:{25,53}]
    wire             _GEN_15 = io_in_a_valid & io_in_a_bits_opcode == 3'h5;	// @[Monitor.scala:146:{25,46}]
    wire             _GEN_16 = io_in_d_valid & io_in_d_bits_opcode == 3'h6;	// @[Monitor.scala:81:25, :310:{25,52}]
    wire             _GEN_17 = io_in_d_bits_size[3:2] == 2'h0;	// @[Monitor.scala:312:27, OneHot.scala:64:12]
    wire             _GEN_18 = io_in_d_valid & io_in_d_bits_opcode == 3'h4;	// @[Misc.scala:205:21, Monitor.scala:318:{25,47}]
    wire             _GEN_19 = io_in_d_bits_param == 2'h2;	// @[Bundles.scala:111:27, Monitor.scala:323:28]
    wire             _GEN_20 = io_in_d_valid & io_in_d_bits_opcode == 3'h5;	// @[Monitor.scala:146:25, :328:{25,51}]
    wire             _GEN_21 = io_in_d_valid & io_in_d_bits_opcode == 3'h0;	// @[Bundles.scala:259:74, Monitor.scala:338:{25,51}]
    wire             _GEN_22 = io_in_d_valid & io_in_d_bits_opcode == 3'h1;	// @[Monitor.scala:346:{25,55}, :640:42]
    wire             _GEN_23 = io_in_d_valid & io_in_d_bits_opcode == 3'h2;	// @[Monitor.scala:354:{25,49}, :640:42]
    wire             _T_1082 = io_in_a_valid & (|a_first_counter);	// @[Edges.scala:228:27, :230:25, Monitor.scala:389:19]
    wire             _T_1106 = io_in_d_valid & (|d_first_counter);	// @[Edges.scala:228:27, :230:25, Monitor.scala:541:19]
    wire             _same_cycle_resp_T_1 = io_in_a_valid & a_first_1;	// @[Edges.scala:230:25, Monitor.scala:648:26]
    wire             a_set_wo_ready = _same_cycle_resp_T_1 & ~io_in_a_bits_source;	// @[Monitor.scala:624:34, :648:{26,71}, :649:22]
    wire             _T_1185 = io_in_d_valid & d_first_1;	// @[Edges.scala:230:25, Monitor.scala:671:26]
    wire             _T_1156 = _T_1185 & ~d_release_ack;	// @[Monitor.scala:670:46, :671:{26,74}, :680:71]
    wire             same_cycle_resp = _same_cycle_resp_T_1 & ~io_in_a_bits_source;	// @[Monitor.scala:648:26, :681:{88,113}]
    wire             _GEN_24 = _T_1156 & same_cycle_resp;	// @[Monitor.scala:680:71, :681:88, :684:30]
    wire             _GEN_25 = _T_1156 & ~same_cycle_resp;	// @[Monitor.scala:680:71, :681:88, :684:30]
    wire             _T_1242 = io_in_d_valid & d_first_2 & d_release_ack;	// @[Edges.scala:230:25, Monitor.scala:670:46, :791:71]
    always @(posedge clock) begin	// @[Monitor.scala:42:11]
      if (_GEN_4 & ~reset & ~(io_in_a_bits_size < 4'hD & ~io_in_a_bits_source & io_in_a_bits_size < 4'h7 & (io_in_a_bits_address[31:16] == 16'h2 | io_in_a_bits_address[31:12] == 20'h10000 | io_in_a_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :81:54, :82:72, Parameters.scala:46:9, :92:42, :137:{31,65}, :671:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_4 & ~reset) begin	// @[Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_4 & ~reset & io_in_a_bits_source) begin	// @[Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_4 & ~reset & ~(|(io_in_a_bits_size[3:2]))) begin	// @[Misc.scala:205:21, Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_4 & ~reset & (|_GEN_3)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_4 & ~reset & _GEN_5) begin	// @[Bundles.scala:111:27, Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_4 & ~reset & io_in_a_bits_mask != 16'hFFFF) begin	// @[Monitor.scala:42:11, :81:54, :88:{18,31}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_4 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_6 & ~reset & ~(io_in_a_bits_size < 4'hD & ~io_in_a_bits_source & io_in_a_bits_size < 4'h7 & (io_in_a_bits_address[31:16] == 16'h2 | io_in_a_bits_address[31:12] == 20'h10000 | io_in_a_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :92:53, :93:72, Parameters.scala:46:9, :92:42, :137:{31,65}, :671:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_6 & ~reset) begin	// @[Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_6 & ~reset & io_in_a_bits_source) begin	// @[Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_6 & ~reset & ~(|(io_in_a_bits_size[3:2]))) begin	// @[Misc.scala:205:21, Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_6 & ~reset & (|_GEN_3)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_6 & ~reset & _GEN_5) begin	// @[Bundles.scala:111:27, Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_6 & ~reset & io_in_a_bits_param == 3'h0) begin	// @[Bundles.scala:259:74, Monitor.scala:42:11, :92:53, :99:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_6 & ~reset & io_in_a_bits_mask != 16'hFFFF) begin	// @[Monitor.scala:42:11, :88:18, :92:53, :100:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_6 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & ~(_T_372 & ~io_in_a_bits_source)) begin	// @[Monitor.scala:42:11, :104:45, Parameters.scala:46:9, :92:42, :1160:30]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & ~(_T_372 & io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_size < 4'h7 & (_GEN_8 == 19'h0 | io_in_a_bits_address[31:16] == 16'h1 | io_in_a_bits_address[31:16] == 16'h2 | _GEN_9 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h10000 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :104:45, Parameters.scala:92:42, :137:{31,45,65}, :670:56, :671:42, :672:30]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & io_in_a_bits_source) begin	// @[Monitor.scala:42:11, :104:45]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & (|_GEN_3)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :104:45]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & (|io_in_a_bits_param)) begin	// @[Monitor.scala:42:11, :104:45, :109:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & _GEN_10) begin	// @[Monitor.scala:42:11, :104:45, :110:30]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_7 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :104:45]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get is corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & ~(_T_470 & ~io_in_a_bits_source & (_T_470 & io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_size < 4'h7 & (_GEN_8 == 19'h0 | _GEN_9 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h10000 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8)))) begin	// @[Monitor.scala:42:11, :114:53, :115:71, Parameters.scala:46:9, :92:42, :137:{31,45,65}, :670:56, :671:42, :672:30]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & io_in_a_bits_source) begin	// @[Monitor.scala:42:11, :114:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & (|_GEN_3)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :114:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & (|io_in_a_bits_param)) begin	// @[Monitor.scala:42:11, :114:53, :118:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & _GEN_10) begin	// @[Monitor.scala:42:11, :110:30, :114:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_12 & ~reset & ~(_T_567 & ~io_in_a_bits_source & (_T_567 & io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_size < 4'h7 & (_GEN_8 == 19'h0 | _GEN_9 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h10000 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8)))) begin	// @[Monitor.scala:42:11, :122:56, :123:74, Parameters.scala:46:9, :92:42, :137:{31,45,65}, :670:56, :671:42, :672:30]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_12 & ~reset & io_in_a_bits_source) begin	// @[Monitor.scala:42:11, :122:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_12 & ~reset & (|_GEN_3)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :122:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_12 & ~reset & (|io_in_a_bits_param)) begin	// @[Monitor.scala:42:11, :122:56, :126:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_12 & ~reset & (|(io_in_a_bits_mask & ~mask))) begin	// @[Cat.scala:33:92, Monitor.scala:42:11, :122:56, :127:{31,33,40}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_13 & ~reset & ~(io_in_a_bits_size < 4'hD & ~io_in_a_bits_source & io_in_a_bits_size < 4'h4 & (_GEN_8 == 19'h0 | io_in_a_bits_address[31:12] == 20'h3 | _GEN_9 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h54000))) begin	// @[Misc.scala:205:21, Monitor.scala:42:11, :130:56, :131:74, Parameters.scala:46:9, :92:42, :137:{31,45,65}, :671:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_13 & ~reset & io_in_a_bits_source) begin	// @[Monitor.scala:42:11, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_13 & ~reset & (|_GEN_3)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_13 & ~reset & io_in_a_bits_param > 3'h4) begin	// @[Bundles.scala:141:33, Misc.scala:205:21, Monitor.scala:42:11, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_13 & ~reset & _GEN_10) begin	// @[Monitor.scala:42:11, :110:30, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & ~(io_in_a_bits_size < 4'hD & ~io_in_a_bits_source & io_in_a_bits_size < 4'h4 & (_GEN_8 == 19'h0 | io_in_a_bits_address[31:12] == 20'h3 | _GEN_9 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h54000))) begin	// @[Misc.scala:205:21, Monitor.scala:42:11, :138:53, :139:71, Parameters.scala:46:9, :92:42, :137:{31,45,65}, :671:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & io_in_a_bits_source) begin	// @[Monitor.scala:42:11, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & (|_GEN_3)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & io_in_a_bits_param[2]) begin	// @[Bundles.scala:148:30, Monitor.scala:42:11, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & _GEN_10) begin	// @[Monitor.scala:42:11, :110:30, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & ~(io_in_a_bits_size < 4'hD & ~io_in_a_bits_source & io_in_a_bits_address[31:12] == 20'h3)) begin	// @[Monitor.scala:42:11, :146:46, :147:68, Parameters.scala:46:9, :92:42, :137:{31,65}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & io_in_a_bits_source) begin	// @[Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & (|_GEN_3)) begin	// @[Edges.scala:20:{16,24}, Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & (|(io_in_a_bits_param[2:1]))) begin	// @[Bundles.scala:161:28, Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & _GEN_10) begin	// @[Monitor.scala:42:11, :110:30, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin	// @[Bundles.scala:45:24, Monitor.scala:49:11]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel has invalid opcode (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_16 & ~reset & _GEN_17) begin	// @[Monitor.scala:49:11, :310:52, :312:27]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_16 & ~reset & (|io_in_d_bits_param)) begin	// @[Monitor.scala:49:11, :310:52, :313:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_16 & ~reset & io_in_d_bits_corrupt) begin	// @[Monitor.scala:49:11, :310:52]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_16 & ~reset & io_in_d_bits_denied) begin	// @[Monitor.scala:49:11, :310:52]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_18 & ~reset & _GEN_17) begin	// @[Monitor.scala:49:11, :312:27, :318:47]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_18 & ~reset & (&io_in_d_bits_param)) begin	// @[Bundles.scala:105:26, Monitor.scala:49:11, :318:47]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_18 & ~reset & _GEN_19) begin	// @[Monitor.scala:49:11, :318:47, :323:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_18 & ~reset & io_in_d_bits_corrupt) begin	// @[Monitor.scala:49:11, :318:47]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_20 & ~reset & _GEN_17) begin	// @[Monitor.scala:49:11, :312:27, :328:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_20 & ~reset & (&io_in_d_bits_param)) begin	// @[Bundles.scala:105:26, Monitor.scala:49:11, :328:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_20 & ~reset & _GEN_19) begin	// @[Monitor.scala:49:11, :323:28, :328:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_20 & ~reset & ~(~io_in_d_bits_denied | io_in_d_bits_corrupt)) begin	// @[Monitor.scala:49:11, :328:51, :334:{15,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_21 & ~reset & (|io_in_d_bits_param)) begin	// @[Monitor.scala:49:11, :338:51, :341:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_21 & ~reset & io_in_d_bits_corrupt) begin	// @[Monitor.scala:49:11, :338:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_22 & ~reset & (|io_in_d_bits_param)) begin	// @[Monitor.scala:49:11, :346:55, :349:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_22 & ~reset & ~(~io_in_d_bits_denied | io_in_d_bits_corrupt)) begin	// @[Monitor.scala:49:11, :346:55, :350:{15,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_23 & ~reset & (|io_in_d_bits_param)) begin	// @[Monitor.scala:49:11, :354:49, :357:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_23 & ~reset & io_in_d_bits_corrupt) begin	// @[Monitor.scala:49:11, :354:49]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_1082 & ~reset & io_in_a_bits_opcode != opcode) begin	// @[Monitor.scala:42:11, :384:22, :389:19, :390:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_1082 & ~reset & io_in_a_bits_param != param) begin	// @[Monitor.scala:42:11, :385:22, :389:19, :391:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_1082 & ~reset & io_in_a_bits_size != size) begin	// @[Monitor.scala:42:11, :386:22, :389:19, :392:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_1082 & ~reset & io_in_a_bits_source != source) begin	// @[Monitor.scala:42:11, :387:22, :389:19, :393:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_1082 & ~reset & io_in_a_bits_address != address) begin	// @[Monitor.scala:42:11, :388:22, :389:19, :394:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_1106 & ~reset & io_in_d_bits_opcode != opcode_1) begin	// @[Monitor.scala:49:11, :535:22, :541:19, :542:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_1106 & ~reset & io_in_d_bits_param != param_1) begin	// @[Monitor.scala:49:11, :536:22, :541:19, :543:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_1106 & ~reset & io_in_d_bits_size != size_1) begin	// @[Monitor.scala:49:11, :537:22, :541:19, :544:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_1106 & ~reset & source_1) begin	// @[Monitor.scala:49:11, :538:22, :541:19]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_1106 & ~reset & io_in_d_bits_sink != sink) begin	// @[Monitor.scala:49:11, :539:22, :541:19, :546:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_1106 & ~reset & io_in_d_bits_denied != denied) begin	// @[Monitor.scala:49:11, :540:22, :541:19, :547:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_1137 & ~reset & inflight >> io_in_a_bits_source) begin	// @[Monitor.scala:42:11, :611:27, :652:27, :658:26]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel re-used a source ID (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_1156 & ~reset & ~(inflight | same_cycle_resp)) begin	// @[Monitor.scala:49:11, :611:27, :680:71, :681:88, :682:49]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_24 & ~reset & ~(io_in_d_bits_opcode == _GEN_2[io_in_a_bits_opcode] | io_in_d_bits_opcode == _GEN_1[io_in_a_bits_opcode])) begin	// @[Monitor.scala:49:11, :684:30, :685:{38,77}, :686:39]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_24 & ~reset & io_in_a_bits_size != io_in_d_bits_size) begin	// @[Monitor.scala:49:11, :684:30, :687:36]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_25 & ~reset & ~(io_in_d_bits_opcode == _GEN_2[inflight_opcodes[3:1]] | io_in_d_bits_opcode == _GEN_1[inflight_opcodes[3:1]])) begin	// @[Monitor.scala:42:11, :49:11, :613:35, :634:152, :684:30, :685:38, :686:39, :689:{38,72}, :690:38]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_25 & ~reset & {4'h0, io_in_d_bits_size} != {1'h0, inflight_sizes[7:1]}) begin	// @[Monitor.scala:42:11, :49:11, :615:33, :638:{19,65,144}, :684:30, :691:36, Parameters.scala:92:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_1185 & a_first_1 & io_in_a_valid & ~io_in_a_bits_source & ~d_release_ack & ~reset & ~(~io_in_d_ready | io_in_a_ready)) begin	// @[Edges.scala:230:25, Monitor.scala:49:11, :670:46, :671:{26,74}, :694:90, :695:{15,32}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (~reset & ~(a_set_wo_ready != (_T_1185 & ~d_release_ack) | ~a_set_wo_ready)) begin	// @[Monitor.scala:49:11, :624:34, :648:71, :649:22, :670:46, :671:{26,71,74}, :699:{29,48,51}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (~reset & ~(~inflight | _plusarg_reader_out == 32'h0 | watchdog < _plusarg_reader_out)) begin	// @[Bundles.scala:259:74, Monitor.scala:42:11, :611:27, :706:27, :709:{16,39,47,59}, PlusArg.scala:80:11]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: TileLink timeout expired (connected at SystemBus.scala:41:55)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_1242 & ~reset) begin	// @[Monitor.scala:49:11, :791:71]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_1242 & ~reset & (|io_in_d_bits_size)) begin	// @[Monitor.scala:49:11, :791:71, :797:36]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SystemBus.scala:41:55)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0]     _RANDOM_0;
    logic [31:0]     _RANDOM_1;
    logic [31:0]     _RANDOM_2;
    logic [31:0]     _RANDOM_3;
    logic [31:0]     _RANDOM_4;
    logic [31:0]     _RANDOM_5;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        a_first_counter = _RANDOM_0[7:0];	// @[Edges.scala:228:27]
        opcode = _RANDOM_0[10:8];	// @[Edges.scala:228:27, Monitor.scala:384:22]
        param = _RANDOM_0[13:11];	// @[Edges.scala:228:27, Monitor.scala:385:22]
        size = _RANDOM_0[17:14];	// @[Edges.scala:228:27, Monitor.scala:386:22]
        source = _RANDOM_0[18];	// @[Edges.scala:228:27, Monitor.scala:387:22]
        address = {_RANDOM_0[31:19], _RANDOM_1[18:0]};	// @[Edges.scala:228:27, Monitor.scala:388:22]
        d_first_counter = _RANDOM_1[26:19];	// @[Edges.scala:228:27, Monitor.scala:388:22]
        opcode_1 = _RANDOM_1[29:27];	// @[Monitor.scala:388:22, :535:22]
        param_1 = _RANDOM_1[31:30];	// @[Monitor.scala:388:22, :536:22]
        size_1 = _RANDOM_2[3:0];	// @[Monitor.scala:537:22]
        source_1 = _RANDOM_2[4];	// @[Monitor.scala:537:22, :538:22]
        sink = _RANDOM_2[6:5];	// @[Monitor.scala:537:22, :539:22]
        denied = _RANDOM_2[7];	// @[Monitor.scala:537:22, :540:22]
        inflight = _RANDOM_2[8];	// @[Monitor.scala:537:22, :611:27]
        inflight_opcodes = _RANDOM_2[12:9];	// @[Monitor.scala:537:22, :613:35]
        inflight_sizes = _RANDOM_2[20:13];	// @[Monitor.scala:537:22, :615:33]
        a_first_counter_1 = _RANDOM_2[28:21];	// @[Edges.scala:228:27, Monitor.scala:537:22]
        d_first_counter_1 = {_RANDOM_2[31:29], _RANDOM_3[4:0]};	// @[Edges.scala:228:27, Monitor.scala:537:22]
        watchdog = {_RANDOM_3[31:5], _RANDOM_4[4:0]};	// @[Edges.scala:228:27, Monitor.scala:706:27]
        d_first_counter_2 = {_RANDOM_4[31:26], _RANDOM_5[1:0]};	// @[Edges.scala:228:27, Monitor.scala:706:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  plusarg_reader #(
    .FORMAT("tilelink_timeout=%d"),
    .DEFAULT(0),
    .WIDTH(32)
  ) plusarg_reader (	// @[PlusArg.scala:80:11]
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .FORMAT("tilelink_timeout=%d"),
    .DEFAULT(0),
    .WIDTH(32)
  ) plusarg_reader_1 (	// @[PlusArg.scala:80:11]
    .out (_plusarg_reader_1_out)
  );
endmodule

